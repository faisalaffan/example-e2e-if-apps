export default helpers;
export namespace helpers {
    export function createBaseADB(opts?: {}): Promise<any>;
    export function prepareEmulator(adb: any, opts: any): Promise<void>;
    /**
     * Set and ensure the locale name of the device under test.
     *
     * @param {Object} adb - The adb module instance.
     * @param {string} language - Language. The language field is case insensitive, but Locale always canonicalizes to lower case.
     *                            format: [a-zA-Z]{2,8}. e.g. en, ja : https://developer.android.com/reference/java/util/Locale.html
     * @param {string} country - Country. The country (region) field is case insensitive, but Locale always canonicalizes to upper case.
     *                            format: [a-zA-Z]{2} | [0-9]{3}. e.g. US, JP : https://developer.android.com/reference/java/util/Locale.html
     * @param {?string} script - Script. The script field is case insensitive but Locale always canonicalizes to title case.
     *                            format: [a-zA-Z]{4}. e.g. Hans in zh-Hans-CN : https://developer.android.com/reference/java/util/Locale.html
     * @throws {Error} If it failed to set locale properly
     */
    export function ensureDeviceLocale(adb: any, language: string, country: string, script?: string | null): Promise<void>;
    export function getDeviceInfoFromCaps(opts?: {}): Promise<{
        udid: any;
        emPort: any;
    }>;
    export function createADB(opts?: {}): Promise<any>;
    export function validatePackageActivityNames(opts: any): void;
    export function getLaunchInfo(adb: any, opts: any): Promise<{
        appPackage: any;
        appWaitPackage: any;
        appActivity: any;
        appWaitActivity: any;
    } | undefined>;
    export function resetApp(adb: any, opts?: {}): Promise<void>;
    export function installApk(adb: any, opts?: {}): Promise<void>;
    /**
     * Installs an array of apks
     * @param {ADB} adb Instance of Appium ADB object
     * @param {Object} opts Opts defined in driver.js
     */
    export function installOtherApks(otherApps: any, adb: any, opts: any): Promise<void>;
    /**
     * Uninstall an array of packages
     * @param {ADB} adb Instance of Appium ADB object
     * @param {Array<string>} appPackages An array of package names to uninstall. If this includes `'*'`, uninstall all of 3rd party apps
     * @param {Array<string>} filterPackages An array of packages does not uninstall when `*` is provided as `appPackages`
     */
    export function uninstallOtherPackages(adb: any, appPackages: string[], filterPackages?: string[]): Promise<void>;
    /**
     * Get third party packages filtered with `filterPackages`
     * @param {ADB} adb Instance of Appium ADB object
     * @param {Array<string>} filterPackages An array of packages does not uninstall when `*` is provided as `appPackages`
     * @returns {Array<string>} An array of installed third pary packages
     */
    export function getThirdPartyPackages(adb: any, filterPackages?: string[]): string[];
    export function initUnicodeKeyboard(adb: any): Promise<any>;
    export function setMockLocationApp(adb: any, app: any): Promise<void>;
    export function resetMockLocation(adb: any): Promise<void>;
    export function installHelperApp(adb: any, apkPath: any, packageId: any): Promise<void>;
    /**
     * Pushes and installs io.appium.settings app.
     * Throws an error if the setting app is required
     *
     * @param {Adb} adb - The adb module instance.
     * @param {Object} opts - Driver options dictionary.
     * @param {boolean} throwError [false] - Whether throw an error if Settings app fails to start
     * @throws {Error} If throwError is true and something happens in installation step
     */
    export function pushSettingsApp(adb: Adb, throwError?: boolean, opts?: any): Promise<void>;
    /**
     * Extracts string.xml and converts it to string.json and pushes
     * it to /data/local/tmp/string.json on for use of bootstrap
     * If app is not present to extract string.xml it deletes remote strings.json
     * If app does not have strings.xml we push an empty json object to remote
     *
     * @param {?string} language - Language abbreviation, for example 'fr'. The default language
     * is used if this argument is not defined.
     * @param {Object} adb - The adb module instance.
     * @param {Object} opts - Driver options dictionary.
     * @returns {Object} The dictionary, where string resource identifiers are keys
     * along with their corresponding values for the given language or an empty object
     * if no matching resources were extracted.
     */
    export function pushStrings(language: string | null, adb: any, opts: any): any;
    export function unlock(driver: any, adb: any, capabilities: any): Promise<void>;
    export function verifyUnlock(adb: any, timeoutMs?: null): Promise<void>;
    export function initDevice(adb: any, opts: any): Promise<any>;
    export function removeNullProperties(obj: any): void;
    export function truncateDecimals(number: any, digits: any): number;
    export function isChromeBrowser(browser: any): boolean;
    export function getChromePkg(browser: any): any;
    export function removeAllSessionWebSocketHandlers(server: any, sessionId: any): Promise<void>;
    /**
     * Takes a desired capability and tries to JSON.parse it as an array,
     * and either returns the parsed array or a singleton array.
     *
     * @param {any} cap A desired capability
     */
    export function parseArray(cap: any): any[];
    /**
     * Validate desired capabilities. Returns true if capability is valid
     *
     * @param {*} cap A desired capability
     * @return {boolean} Returns true if the capability is valid
     * @throws {Error} If the caps has invalid capability
     */
    export function validateDesiredCaps(caps: any): boolean;
    /**
     * Adjust the capabilities for a browser session
     *
     * @param {Object} caps - Current capabilities object
     * !!! The object is mutated by this method call !!!
     * @returns {Object} The same possibly mutated `opts` instance.
     * No mutation is happening is the current session if
     * appPackage/appActivity caps have already been provided.
     */
    export function adjustBrowserSessionCaps(caps?: any): any;
    /**
     * Checks whether the current device under test is an emulator
     *
     * @param {ADB} adb - appium-adb instance
     * @param {Object} opts - driver options mapping
     * @returns {boolean} `true` if the device is an Android emulator
     */
    export function isEmulator(adb: any, opts: any): boolean;
    export { Bootstrap as bootstrap };
    export { unlocker };
}
export const SETTINGS_HELPER_PKG_ID: "io.appium.settings";
export const APP_STATE: Readonly<{
    NOT_INSTALLED: 0;
    NOT_RUNNING: 1;
    RUNNING_IN_BACKGROUND: 3;
    RUNNING_IN_FOREGROUND: 4;
}>;
export function prepareAvdArgs(adb: any, opts: any): any[];
export function ensureNetworkSpeed(adb: any, networkSpeed: any): any;
import Bootstrap from "./bootstrap";
import { helpers as unlocker } from "./unlock-helpers";
//# sourceMappingURL=android-helpers.d.ts.map