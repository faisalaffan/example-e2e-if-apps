export default commands;
export type MobileAppInstalledOptions = {
    /**
     * - Application package identifier. Must be always provided.
     */
    appId: string;
};
export type MobileQueryAppStateOptions = {
    /**
     * - Application package identifier. Must be always provided.
     */
    appId: string;
};
export type MobileActivateAppOptions = {
    /**
     * - Application package identifier. Must be always provided.
     */
    appId: string;
};
export type UninstallOptions = {
    /**
     * [20000] - The count of milliseconds to wait until the
     *           app is uninstalled.
     */
    timeout: number;
    /**
     * [false] - Set to true in order to keep the
     *           application data and cache folders after uninstall.
     */
    keepData: boolean;
};
export type MobileRemoveAppOptions = {
    /**
     * - Application package identifier. Must be always provided.
     */
    appId: string;
};
export type TerminateOptions = {
    /**
     * [500] - The count of milliseconds to wait until the
     *         app is terminated. The method will skip
     *         checking the app state check if the timeout
     *         was lower or equal to zero. Then, the return
     *         value will be true.
     */
    timeout: number | string;
};
export type MobileTerminateAppOptions = {
    /**
     * - Application package identifier. Must be always provided.
     */
    appId: string;
    /**
     * [500] - The count of milliseconds to wait until the
     *         app is terminated.
     */
    timeout: number | string;
};
export type InstallOptions = {
    /**
     * [60000] - The count of milliseconds to wait until the
     *           app is installed.
     */
    timeout: number;
    /**
     * [false] - Set to true in order to allow test
     *           packages installation.
     */
    allowTestPackages: boolean;
    /**
     * [false] - Set to true to install the app on sdcard
     *           instead of the device memory.
     */
    useSdcard: boolean;
    /**
     * [false] - Set to true in order to grant all the
     *           permissions requested in the application's manifest
     *           automatically after the installation is completed
     *           under Android 6+.
     */
    grantPermissions: boolean;
    /**
     * [true] - Set it to false if you don't want
     *          the application to be upgraded/reinstalled
     *          if it is already present on the device.
     */
    replace: boolean;
};
export type MobileInstallAppOptions = {
    /**
     * - The local apk path or a remote url. Must be always provided.
     */
    appPath: string;
    /**
     * [60000] - The count of milliseconds to wait until the
     *           app is installed.
     */
    timeout: number;
    /**
     * [false] - Set to true in order to allow test
     *           packages installation.
     */
    allowTestPackages: boolean;
    /**
     * [false] - Set to true to install the app on sdcard
     *           instead of the device memory.
     */
    useSdcard: boolean;
    /**
     * [false] - Set to true in order to grant all the
     *           permissions requested in the application's manifest
     *           automatically after the installation is completed
     *           under Android 6+.
     */
    grantPermissions: boolean;
    /**
     * [true] - Set it to false if you don't want
     *          the application to be upgraded/reinstalled
     *          if it is already present on the device.
     */
    replace: boolean;
};
export type ClearAppOptions = {
    /**
     * The identifier of the application package to be cleared
     */
    appId: string;
};
export namespace commands {
    /**
     * Verify whether an application is installed or not
     *
     * @param {string} appId - Application package identifier
     * @returns {boolean} true if the app is installed
     */
    function isAppInstalled(appId: string): boolean;
    /**
     * @typedef {Object} MobileAppInstalledOptions
     * @property {string} appId - Application package identifier. Must be always provided.
     */
    /**
     * Verify whether an application is installed or not
     *
     * @param {MobileAppInstalledOptions} opts
     * @returns {boolean} Same as in `isAppInstalled`
     */
    function mobileIsAppInstalled(opts?: MobileAppInstalledOptions): boolean;
    /**
     * Queries the current state of the app.
     *
     * @param {string} appId - Application package identifier
     * @returns {number} The corresponding constant, which describes
     *                   the current application state:
     * 0 - is the app is not installed
     * 1 - if the app is installed, but is not running
     * 3 - if the app is running in the background
     * 4 - if the app is running in the foreground
     */
    function queryAppState(appId: string): number;
    /**
     * @typedef {Object} MobileQueryAppStateOptions
     * @property {string} appId - Application package identifier. Must be always provided.
     */
    /**
     * Queries the current state of the app.
     *
     * @param {MobileQueryAppStateOptions} opts
     * @returns {number} Same as in `queryAppState`
     */
    function mobileQueryAppState(opts?: MobileQueryAppStateOptions): number;
    /**
     * Activates the given application or launches it if necessary.
     * The action literally simulates
     * clicking the corresponding application icon on the dashboard.
     *
     * @param {string} appId - Application package identifier
     * @throws {Error} If the app cannot be activated
     */
    function activateApp(appId: string): Promise<void>;
    /**
     * @typedef {Object} MobileActivateAppOptions
     * @property {string} appId - Application package identifier. Must be always provided.
     */
    /**
     * Activates the given application or launches it if necessary.
     * The action literally simulates
     * clicking the corresponding application icon on the dashboard.
     *
     * @param {MobileActivateAppOptions} opts
     * @throws {Error} If the app cannot be activated
     */
    function mobileActivateApp(opts?: MobileActivateAppOptions): Promise<void>;
    /**
     * @typedef {Object} UninstallOptions
     * @property {number} timeout [20000] - The count of milliseconds to wait until the
     *                                      app is uninstalled.
     * @property {boolean} keepData [false] - Set to true in order to keep the
     *                                        application data and cache folders after uninstall.
     */
    /**
     * Remove the corresponding application if is installed.
     * The call is ignored if the app is not installed.
     *
     * @param {string} appId - Application package identifier
     * @param {?UninstallOptions} options - The set of removal options
     * @returns {boolean} True if the package was found on the device and
     *                    successfully uninstalled.
     */
    function removeApp(appId: string, options?: UninstallOptions | null): boolean;
    /**
     * @typedef {Object} MobileRemoveAppOptions
     * @property {string} appId - Application package identifier. Must be always provided.
     */
    /**
     * Remove the corresponding application if is installed.
     * The call is ignored if the app is not installed.
     *
     * @param {MobileRemoveAppOptions} opts
     * @returns {boolean} Same as in `removeApp`
     */
    function mobileRemoveApp(opts?: MobileRemoveAppOptions): boolean;
    /**
     * @typedef {Object} TerminateOptions
     * @property {number|string} timeout [500] - The count of milliseconds to wait until the
     *                                           app is terminated. The method will skip
     *                                           checking the app state check if the timeout
     *                                           was lower or equal to zero. Then, the return
     *                                           value will be true.
     */
    /**
     * Terminates the app if it is running. If the given timeout was lower or equal to zero,
     * it returns true after terminating the app without checking the app state.
     *
     * @param {string} appId - Application package identifier
     * @param {?TerminateOptions} options - The set of application termination options
     * @returns {boolean} True if the app has been successfully terminated.
     * @throws {Error} if the app has not been terminated within the given timeout.
     */
    function terminateApp(appId: string, options?: TerminateOptions | null): boolean;
    /**
     * @typedef {Object} MobileTerminateAppOptions
     * @property {string} appId - Application package identifier. Must be always provided.
     * @property {number|string} timeout [500] - The count of milliseconds to wait until the
     *                                           app is terminated.
     */
    /**
     * Terminates the app if it is running.
     *
     * @param {MobileTerminateAppOptions} opts
     * @returns {boolean} Same as in `terminateApp`
     * @throws {Error} if the app has not been terminated within the given timeout.
     */
    function mobileTerminateApp(opts?: MobileTerminateAppOptions): boolean;
    /**
     * @typedef {Object} InstallOptions
     * @property {number} timeout [60000] - The count of milliseconds to wait until the
     *                                      app is installed.
     * @property {boolean} allowTestPackages [false] - Set to true in order to allow test
     *                                                 packages installation.
     * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard
     *                                         instead of the device memory.
     * @property {boolean} grantPermissions [false] - Set to true in order to grant all the
     *                                                permissions requested in the application's manifest
     *                                                automatically after the installation is completed
     *                                                under Android 6+.
     * @property {boolean} replace [true] - Set it to false if you don't want
     *                                      the application to be upgraded/reinstalled
     *                                      if it is already present on the device.
     */
    /**
     * Installs the given application to the device under test
     *
     * @param {string} appPath - The local apk path or a remote url
     * @param {?InstallOptions} options - The set of installation options
     * @throws {Error} if the given apk does not exist or is not reachable
     */
    function installApp(appPath: string, options?: InstallOptions | null): Promise<void>;
    /**
     * @typedef {Object} MobileInstallAppOptions
     * @property {string} appPath - The local apk path or a remote url. Must be always provided.
     * @property {number} timeout [60000] - The count of milliseconds to wait until the
     *                                      app is installed.
     * @property {boolean} allowTestPackages [false] - Set to true in order to allow test
     *                                                 packages installation.
     * @property {boolean} useSdcard [false] - Set to true to install the app on sdcard
     *                                         instead of the device memory.
     * @property {boolean} grantPermissions [false] - Set to true in order to grant all the
     *                                                permissions requested in the application's manifest
     *                                                automatically after the installation is completed
     *                                                under Android 6+.
     * @property {boolean} replace [true] - Set it to false if you don't want
     *                                      the application to be upgraded/reinstalled
     *                                      if it is already present on the device.
     */
    /**
     * Installs the given application to the device under test
     *
     * @param {MobileInstallAppOptions} opts
     * @throws {Error} if the given apk does not exist or is not reachable
     */
    function mobileInstallApp(opts?: MobileInstallAppOptions): Promise<void>;
    /**
     * @typedef {Object} ClearAppOptions
     * @property {!string} appId The identifier of the application package to be cleared
     */
    /**
     * Deletes all data associated with a package.
     *
     * @param {ClearAppOptions} opts
     * @throws {Error} If cleaning of the app data fails
     */
    function mobileClearApp(opts?: ClearAppOptions): Promise<void>;
}
//# sourceMappingURL=app-management.d.ts.map