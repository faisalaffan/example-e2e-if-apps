export default commands;
export type WindowProperties = {
    /**
     * Whether the window is visible
     */
    visible: boolean;
    /**
     * Window x coordinate
     */
    x: number;
    /**
     * Window y coordinate
     */
    y: number;
    /**
     * Window width
     */
    width: number;
    /**
     * Window height
     */
    height: number;
};
export type StatusBarCommandOptions = {
    /**
     * One of supported status bar commands:
     * - expandNotifications: Open the notifications panel.
     * - expandSettings: Open the notifications panel and expand quick settings if present.
     * - collapse: Collapse the notifications and settings panel.
     * - addTile: Add a TileService of the specified component.
     * - removeTile: Remove a TileService of the specified component.
     * - clickTile: Click on a TileService of the specified component.
     * - getStatusIcons: Print the list of status bar icons and the order they appear in.
     * Each list item is separated with a new line character.
     */
    command: string;
    /**
     * The name of the tile component.
     * It is only required for (add|remove|click)Tile commands.
     * Example value: com.package.name/.service.QuickSettingsTileComponent
     */
    component: string | null;
};
/**
 * Extracts status and navigation bar information from the window manager output.
 *
 * @param {Array<string>} lines Output from dumpsys command.
 * Check the corresponding unit tests for more details on the input format.
 * @param {Object?} log Logger instance
 * @return {Object} An object containing two items where keys are statusBar and navigationBar,
 * and values are corresponding WindowProperties objects
 * @throws {Error} If no window properties could be parsed
 */
export function parseWindows(lines: Array<string>, log?: any | null): any;
/**
 * @typedef {Object} WindowProperties
 * @property {boolean} visible Whether the window is visible
 * @property {number} x Window x coordinate
 * @property {number} y Window y coordinate
 * @property {number} width Window width
 * @property {number} height Window height
 */
/**
 * Parses window properties from adb dumpsys output
 *
 * @param {string} name The name of the window whose properties are being parsed
 * @param {Array<string>} props The list of particular window property lines.
 * Check the corresponding unit tests for more details on the input format.
 * @param {Object?} log Logger instance
 * @returns {WindowProperties} Parsed properties object
 * @throws {Error} If there was an issue while parsing the properties string
 */
export function parseWindowProperties(name: string, props: Array<string>, log?: any | null): WindowProperties;
declare namespace commands {
    function getSystemBars(): Promise<any>;
    /**
     * @typedef {Object} StatusBarCommandOptions
     * @property {string} command One of supported status bar commands:
     * - expandNotifications: Open the notifications panel.
     * - expandSettings: Open the notifications panel and expand quick settings if present.
     * - collapse: Collapse the notifications and settings panel.
     * - addTile: Add a TileService of the specified component.
     * - removeTile: Remove a TileService of the specified component.
     * - clickTile: Click on a TileService of the specified component.
     * - getStatusIcons: Print the list of status bar icons and the order they appear in.
     * Each list item is separated with a new line character.
     * @property {string?} component The name of the tile component.
     * It is only required for (add|remove|click)Tile commands.
     * Example value: com.package.name/.service.QuickSettingsTileComponent
     */
    /**
     * Performs commands on the system status bar. A thin wrapper over
     * 'adb shell cmd statusbar' CLI. Works on Android Oreo and newer.
     *
     * @param {StatusBarCommandOptions} opts
     * @returns {Promise<string>} The actual output of the downstream console command.
     */
    function mobilePerformStatusBarCommand(opts?: StatusBarCommandOptions): Promise<string>;
}
//# sourceMappingURL=system-bars.d.ts.map