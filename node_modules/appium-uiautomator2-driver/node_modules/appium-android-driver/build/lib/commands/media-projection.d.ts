export default commands;
export type StartRecordingOptions = {
    /**
     * Maximum supported resolution on-device (Detected
     * automatically by the app itself), which usually equals to Full HD 1920x1080 on most
     * phones however you can change it to following supported resolutions
     * as well: "1920x1080", "1280x720", "720x480", "320x240", "176x144".
     */
    resolution: string | null;
    /**
     * [900] Default value: 900 seconds which means
     * maximum allowed duration is 15 minute, you can increase it if your test takes
     * longer than that.
     */
    maxDurationSec: number | null;
    /**
     * [high] Means recording thread priority is maximum
     * however if you face performance drops during testing with recording enabled, you
     * can reduce recording priority to "normal" or "low".
     */
    priority: string | null;
    /**
     * You can type recording video file name as you want,
     * but recording currently supports only "mp4" format so your filename must end with ".mp4".
     * An invalid file name will fail to start the recording.
     * If not provided then the current timestamp will be used as file name.
     */
    filename: string | null;
};
export type StopRecordingOptions = {
    /**
     * The path to the remote location, where the resulting video should be uploaded.
     * The following protocols are supported: http/https, ftp.
     * Null or empty string value (the default setting) means the content of resulting
     * file should be encoded as Base64 and passed as the endpoont response value.
     * An exception will be thrown if the generated media file is too big to
     * fit into the available process memory.
     */
    remotePath: string | null;
    /**
     * The name of the user for the remote authentication.
     */
    user: string | null;
    /**
     * The password for the remote authentication.
     */
    pass: string | null;
    /**
     * The http multipart upload method name. The 'PUT' one is used by default.
     */
    method: string | null;
    /**
     * Additional headers mapping for multipart http(s) uploads
     */
    headers: any | null;
    /**
     * [file] The name of the form field, where the file content BLOB should be stored for
     * http(s) uploads
     */
    fileFieldName: string | null;
    /**
     * Additional form fields for multipart http(s) uploads
     */
    formFields: any | (Array<Pair> | null);
    /**
     * - The actual media upload request timeout in milliseconds;
     * defaults to
     */
    uploadTimeout: number | null;
};
export namespace commands {
    /**
     * @typedef {Object} StartRecordingOptions
     *
     * @property {string?} resolution Maximum supported resolution on-device (Detected
     * automatically by the app itself), which usually equals to Full HD 1920x1080 on most
     * phones however you can change it to following supported resolutions
     * as well: "1920x1080", "1280x720", "720x480", "320x240", "176x144".
     * @property {number?} maxDurationSec [900] Default value: 900 seconds which means
     * maximum allowed duration is 15 minute, you can increase it if your test takes
     * longer than that.
     * @property {string?} priority [high] Means recording thread priority is maximum
     * however if you face performance drops during testing with recording enabled, you
     * can reduce recording priority to "normal" or "low".
     * @property {string?} filename You can type recording video file name as you want,
     * but recording currently supports only "mp4" format so your filename must end with ".mp4".
     * An invalid file name will fail to start the recording.
     * If not provided then the current timestamp will be used as file name.
     */
    /**
     * Record the display of a real devices running Android 10 (API level 29) and higher.
     * The screen activity is recorded to a MPEG-4 file. Audio is also recorded by default
     * (only for apps that allow it in their manifests).
     * If another recording has been already started then the command will exit silently.
     * The previously recorded video file is deleted when a new recording session is started.
     * Recording continues it is stopped explicitly or until the timeout happens.
     *
     * @param {?StartRecordingOptions} options Available options.
     * @returns {boolean} True if a new recording has successfully started.
     * @throws {Error} If recording has failed to start or is not supported on the device under test.
     */
    function mobileStartMediaProjectionRecording(options?: StartRecordingOptions | null): boolean;
    /**
     * Checks if a media projection-based recording is currently running.
     *
     * @returns {boolean} True if a recording is in progress.
     * @throws {Error} If a recording is not supported on the device under test.
     */
    function mobileIsMediaProjectionRecordingRunning(): boolean;
    /**
     * @typedef {Object} StopRecordingOptions
     *
     * @property {string?} remotePath The path to the remote location, where the resulting video should be uploaded.
     * The following protocols are supported: http/https, ftp.
     * Null or empty string value (the default setting) means the content of resulting
     * file should be encoded as Base64 and passed as the endpoont response value.
     * An exception will be thrown if the generated media file is too big to
     * fit into the available process memory.
     * @property {string?} user The name of the user for the remote authentication.
     * @property {string?} pass The password for the remote authentication.
     * @property {string?} method The http multipart upload method name. The 'PUT' one is used by default.
     * @property {Object?} headers Additional headers mapping for multipart http(s) uploads
     * @property {string?} fileFieldName [file] The name of the form field, where the file content BLOB should be stored for
     * http(s) uploads
     * @property {Object|Array<Pair>?} formFields Additional form fields for multipart http(s) uploads
     * @property {number?} uploadTimeout - The actual media upload request timeout in milliseconds;
     * defaults to @appium/support net DEFAULT_TIMEOUT_MS
     */
    /**
     * Stop a media projection-based recording.
     * If no recording has been started before then an error is thrown.
     * If the recording has been already finished before this API has been called
     * then the most recent recorded file is returned.
     *
     * @param {?StopRecordingOptions} options Available options.
     * @returns {string} Base64-encoded content of the recorded media file if 'remotePath'
     * parameter is falsy or an empty string.
     * @throws {Error} If there was an error while stopping a recording,
     * fetching the content of the remote media file,
     * or if a recording is not supported on the device under test.
     */
    function mobileStopMediaProjectionRecording(options?: StopRecordingOptions | null): string;
}
//# sourceMappingURL=media-projection.d.ts.map