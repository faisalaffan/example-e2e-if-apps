export default extensions;
export type WebviewsMapping = {
    /**
     * The name of the Devtools Unix socket
     */
    proc: string;
    /**
     * The web view alias. Looks like `WEBVIEW_`
     * prefix plus PID or package name
     */
    webview: string;
    /**
     * Webview information as it is retrieved by
     * /json/version CDP endpoint
     */
    info: any | null;
    /**
     * Webview pages list as it is retrieved by
     * /json/list CDP endpoint
     */
    pages: Array<any> | null;
};
export namespace commands {
    function getCurrentContext(): Promise<any>;
    function getContexts(): Promise<any>;
    function setContext(name: any): Promise<void>;
    /**
     * @typedef {Object} WebviewsMapping
     * @property {string} proc The name of the Devtools Unix socket
     * @property {string} webview The web view alias. Looks like `WEBVIEW_`
     * prefix plus PID or package name
     * @property {?Object} info Webview information as it is retrieved by
     * /json/version CDP endpoint
     * @property {?Array<Object>} pages Webview pages list as it is retrieved by
     * /json/list CDP endpoint
     * @propery {?string} webviewName An actual webview name for switching context.
     * This value becomes null when failing to find a PID for a webview.
     *
     * The following json demonstrates the example of WebviewsMapping object.
     * Note that `description` in `page` can be an empty string most likely when it comes to Mobile Chrome)
     * {
     *   "proc": "@webview_devtools_remote_22138",
     *   "webview": "WEBVIEW_22138",
     *   "info": {
     *     "Android-Package": "io.appium.settings",
     *     "Browser": "Chrome/74.0.3729.185",
     *     "Protocol-Version": "1.3",
     *     "User-Agent": "Mozilla/5.0 (Linux; Android 10; Android SDK built for x86 Build/QSR1.190920.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.185 Mobile Safari/537.36",
     *     "V8-Version": "7.4.288.28",
     *     "WebKit-Version": "537.36 (@22955682f94ce09336197bfb8dffea991fa32f0d)",
     *     "webSocketDebuggerUrl": "ws://127.0.0.1:10900/devtools/browser"
     *   },
     *   "pages": [
     *     {
     *       "description": "{\"attached\":true,\"empty\":false,\"height\":1458,\"screenX\":0,\"screenY\":336,\"visible\":true,\"width\":1080}",
     *       "devtoolsFrontendUrl": "http://chrome-devtools-frontend.appspot.com/serve_rev/@22955682f94ce09336197bfb8dffea991fa32f0d/inspector.html?ws=127.0.0.1:10900/devtools/page/27325CC50B600D31B233F45E09487B1F",
     *       "id": "27325CC50B600D31B233F45E09487B1F",
     *       "title": "Releases · appium/appium · GitHub",
     *       "type": "page",
     *       "url": "https://github.com/appium/appium/releases",
     *       "webSocketDebuggerUrl": "ws://127.0.0.1:10900/devtools/page/27325CC50B600D31B233F45E09487B1F"
     *     }
     *   ],
     *   "webviewName": "WEBVIEW_com.io.appium.setting"
     * }
     */
    /**
     * Returns a webviewsMapping based on CDP endpoints
     *
     * @return {Array<WebviewsMapping>} webviewsMapping
     */
    function mobileGetContexts(): WebviewsMapping[];
}
export namespace helpers {
    function assignContexts(webviewsMapping: any): string[];
    function switchContext(name: any, webviewsMapping: any): Promise<void>;
    function defaultContextName(): string;
    function defaultWebviewName(): string;
    function isWebContext(): boolean;
    function startChromedriverProxy(context: any, webviewsMapping: any): Promise<void>;
    function suspendChromedriverProxy(): void;
    function onChromedriverStop(context: any): Promise<void>;
    function stopChromedriverProxies(): Promise<void>;
    function isChromedriverContext(viewName: any): boolean;
    function shouldDismissChromeWelcome(): any;
    function dismissChromeWelcome(): Promise<void>;
    function startChromeSession(): Promise<void>;
    function isChromedriverAutodownloadEnabled(): boolean;
    function setupNewChromedriver(opts: any, curDeviceId: any, adb: any, context?: null): Promise<Chromedriver>;
}
export function setupNewChromedriver(opts: any, curDeviceId: any, adb: any, context?: null): Promise<Chromedriver>;
declare let extensions: {};
import Chromedriver from "appium-chromedriver";
//# sourceMappingURL=context.d.ts.map