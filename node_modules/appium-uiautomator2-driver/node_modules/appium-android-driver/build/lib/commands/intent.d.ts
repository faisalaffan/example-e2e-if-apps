export default commands;
export type StartActivityOptions = {
    /**
     * ['current'] - The user ID for which the service is started.
     * The `current` user id is used by default
     */
    user: (string | number) | null;
    /**
     * [false] - Set it to `true` if you want to block the method call
     * until the activity manager's process returns the control to the system.
     */
    wait: boolean | null;
    /**
     * [false] - Set it to `true` to force stop the target
     * app before starting the activity
     */
    stop: boolean | null;
    /**
     * - The windowing mode to launch the activity into.
     * Check https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/WindowConfiguration.java
     * for more details on possible windowing modes (constants starting with `WINDOWING_MODE_`).
     */
    windowingMode: (number | string) | null;
    /**
     * - The activity type to launch the activity as.
     * Check https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/WindowConfiguration.java
     * for more details on possible activity types (constants starting with `ACTIVITY_TYPE_`).
     */
    activityType: (number | string) | null;
    /**
     * - The display identifier to launch the activity into.
     */
    display: (number | string) | null;
    /**
     * - The name of the activity intent to start, for example
     * `com.some.package.name/.YourServiceSubClassName`
     */
    intent: string | null;
    /**
     * - Action name
     */
    action: string | null;
    /**
     * - Package name
     */
    package: string | null;
    /**
     * - Unified resource identifier
     */
    uri: string | null;
    /**
     * - Mime type
     */
    mimeType: string | null;
    /**
     * - Optional identifier
     */
    identifier: string | null;
    /**
     * - One or more category names
     */
    categories: (string | Array<string>) | null;
    /**
     * - Component name
     */
    component: string | null;
    /**
     * - Optional intent arguments. Must be represented
     * as array of arrays, where each subarray item contains two or three string items:
     * value type, key name and the value itself.
     * Supported value types are:
     * - s: string. Value must be a valid string
     * - sn: null. Value is ignored for this type
     * - z: boolean. Value must be either `true` or `false`
     * - i: integer. Value must be a valid 4-byte integer number
     * - l: long. Value must be a valid 8-byte long number
     * - f: float: Value must be a valid float number
     * - u: uri. Value must be a valid uniform resource identifier string
     * - cn: component name. Value must be a valid component name string
     * - ia: Integer[]. Value must be a string of comma-separated integers
     * - ial: List<Integer>. Value must be a string of comma-separated integers
     * - la: Long[]. Value must be a string of comma-separated long numbers
     * - lal: List<Long>. Value must be a string of comma-separated long numbers
     * - fa: Float[]. Value must be a string of comma-separated float numbers
     * - fal: List<Float>. Value must be a string of comma-separated float numbers
     * - sa: String[]. Value must be comma-separated strings. To embed a comma into a string,
     * escape it using "\,"
     * - sal: List<String>. Value must be comma-separated strings. To embed a comma into a string,
     * escape it using "\,"
     * For example: [['s', 'varName1', 'My String1'], ['s', 'varName2', 'My String2'], ['ia', 'arrName', '1,2,3,4']]
     */
    extras: Array<string | Array<string>>;
    /**
     * - Intent startup-specific flags as a hexadecimal string.
     * See https://developer.android.com/reference/android/content/Intent.html
     * for the list of available flag values (constants starting with FLAG_ACTIVITY_).
     * Flag values could be merged using the logical 'or' operation.
     * For example, 0x10200000 is the combination of two flags:
     * 0x10000000 `FLAG_ACTIVITY_NEW_TASK` | 0x00200000 `FLAG_ACTIVITY_RESET_TASK_IF_NEEDED`
     */
    flags: string | null;
};
export type BroadcastOptions = {
    /**
     * ['all'] - The user ID for which the broadcast is sent.
     * The `current` alias assumes the current user ID.
     */
    user: (string | number) | null;
    /**
     * - Require receiver to hold the given permission.
     */
    receiverPermission: string | null;
    /**
     * [false] - Whether the receiver may
     * start activities even if in the background.
     */
    allowBackgroundActivityStarts: boolean | null;
    /**
     * - The name of the intent to broadcast to, for example
     * `com.some.package.name/.YourServiceSubClassName`.
     */
    intent: string | null;
    /**
     * - Action name
     */
    action: string | null;
    /**
     * - Unified resource identifier
     */
    uri: string | null;
    /**
     * - Mime type
     */
    mimeType: string | null;
    /**
     * - Optional identifier
     */
    identifier: string | null;
    /**
     * - One or more category names
     */
    categories: (string | Array<string>) | null;
    /**
     * - Component name
     */
    component: string | null;
    /**
     * - Package name
     */
    package: string | null;
    /**
     * - Optional intent arguments.
     * See above for the detailed description.
     */
    extras: Array<Array<string>>;
    /**
     * - Intent startup-specific flags as a hexadecimal string.
     * See above for the detailed description.
     */
    flags: string | null;
};
export type StartServiceOptions = {
    /**
     * ['current'] - The user ID for which the service is started.
     * The `current` user id is used by default
     */
    user: (string | number) | null;
    /**
     * [false] - Set it to `true` if your service must be
     * started as foreground service. This option is ignored if the API level of the
     * device under test is below 26 (Android 8).
     */
    foreground: boolean | null;
    /**
     * - The name of the service intent to start, for example
     * `com.some.package.name/.YourServiceSubClassName`.
     */
    intent: string | null;
    /**
     * - Action name
     */
    action: string | null;
    /**
     * - Unified resource identifier
     */
    uri: string | null;
    /**
     * - Mime type
     */
    mimeType: string | null;
    /**
     * - Optional identifier
     */
    identifier: string | null;
    /**
     * - One or more category names
     */
    categories: (string | Array<string>) | null;
    /**
     * - Component name
     */
    component: string | null;
    /**
     * - Package name
     */
    package: string | null;
    /**
     * - Optional intent arguments.
     * See above for the detailed description.
     */
    extras: Array<Array<string>>;
    /**
     * - Intent startup-specific flags as a hexadecimal string.
     * See above for the detailed description.
     */
    flags: string | null;
};
export type StopServiceOptions = {
    /**
     * ['current'] - The user ID for which the service is running.
     * The `current` user id is used by default
     */
    user: string | number;
    /**
     * - The name of the service intent to stop, for example
     * `com.some.package.name/.YourServiceSubClassName`.
     */
    intent: string | null;
    /**
     * - Action name
     */
    action: string | null;
    /**
     * - Unified resource identifier
     */
    uri: string | null;
    /**
     * - Mime type
     */
    mimeType: string | null;
    /**
     * - Optional identifier
     */
    identifier: string | null;
    /**
     * - One or more category names
     */
    categories: (string | Array<string>) | null;
    /**
     * - Component name
     */
    component: string | null;
    /**
     * - Package name
     */
    package: string | null;
    /**
     * - Optional intent arguments.
     * See above for the detailed description.
     */
    extras: Array<Array<string>>;
    /**
     * - See above for the detailed description.
     */
    flags: string | null;
};
export namespace commands {
    /**
     * @typedef {Object} StartActivityOptions
     * @property {?string|number} user ['current'] - The user ID for which the service is started.
     * The `current` user id is used by default
     * @property {?boolean} wait [false] - Set it to `true` if you want to block the method call
     * until the activity manager's process returns the control to the system.
     * @property {?boolean} stop [false] - Set it to `true` to force stop the target
     * app before starting the activity
     * @property {?number|string} windowingMode - The windowing mode to launch the activity into.
     * Check https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/WindowConfiguration.java
     * for more details on possible windowing modes (constants starting with `WINDOWING_MODE_`).
     * @property {?number|string} activityType - The activity type to launch the activity as.
     * Check https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/WindowConfiguration.java
     * for more details on possible activity types (constants starting with `ACTIVITY_TYPE_`).
     * @property {?number|string} display - The display identifier to launch the activity into.
     * @property {?string} intent - The name of the activity intent to start, for example
     * `com.some.package.name/.YourServiceSubClassName`
     * @property {?string} action - Action name
     * @property {?string} package - Package name
     * @property {?string} uri - Unified resource identifier
     * @property {?string} mimeType - Mime type
     * @property {?string} identifier - Optional identifier
     * @property {?string|Array<string>} categories - One or more category names
     * @property {?string} component - Component name
     * @property {Array<string|Array<string>>} extras - Optional intent arguments. Must be represented
     * as array of arrays, where each subarray item contains two or three string items:
     * value type, key name and the value itself.
     * Supported value types are:
     * - s: string. Value must be a valid string
     * - sn: null. Value is ignored for this type
     * - z: boolean. Value must be either `true` or `false`
     * - i: integer. Value must be a valid 4-byte integer number
     * - l: long. Value must be a valid 8-byte long number
     * - f: float: Value must be a valid float number
     * - u: uri. Value must be a valid uniform resource identifier string
     * - cn: component name. Value must be a valid component name string
     * - ia: Integer[]. Value must be a string of comma-separated integers
     * - ial: List<Integer>. Value must be a string of comma-separated integers
     * - la: Long[]. Value must be a string of comma-separated long numbers
     * - lal: List<Long>. Value must be a string of comma-separated long numbers
     * - fa: Float[]. Value must be a string of comma-separated float numbers
     * - fal: List<Float>. Value must be a string of comma-separated float numbers
     * - sa: String[]. Value must be comma-separated strings. To embed a comma into a string,
     * escape it using "\,"
     * - sal: List<String>. Value must be comma-separated strings. To embed a comma into a string,
     * escape it using "\,"
     * For example: [['s', 'varName1', 'My String1'], ['s', 'varName2', 'My String2'], ['ia', 'arrName', '1,2,3,4']]
     * @property {?string} flags - Intent startup-specific flags as a hexadecimal string.
     * See https://developer.android.com/reference/android/content/Intent.html
     * for the list of available flag values (constants starting with FLAG_ACTIVITY_).
     * Flag values could be merged using the logical 'or' operation.
     * For example, 0x10200000 is the combination of two flags:
     * 0x10000000 `FLAG_ACTIVITY_NEW_TASK` | 0x00200000 `FLAG_ACTIVITY_RESET_TASK_IF_NEEDED`
     */
    /**
     * Starts the given activity intent.
     *
     * @param {StartActivityOptions} opts
     * @returns {string} The command output
     * @throws {Error} If there was a failure while starting the activity
     * or required options are missing
     */
    function mobileStartActivity(opts?: StartActivityOptions): string;
    /**
     * @typedef {Object} BroadcastOptions
     * @property {?string|number} user ['all'] - The user ID for which the broadcast is sent.
     * The `current` alias assumes the current user ID.
     * @property {?string} receiverPermission - Require receiver to hold the given permission.
     * @property {?boolean} allowBackgroundActivityStarts [false] - Whether the receiver may
     * start activities even if in the background.
     * @property {?string} intent - The name of the intent to broadcast to, for example
     * `com.some.package.name/.YourServiceSubClassName`.
     * @property {?string} action - Action name
     * @property {?string} uri - Unified resource identifier
     * @property {?string} mimeType - Mime type
     * @property {?string} identifier - Optional identifier
     * @property {?string|Array<string>} categories - One or more category names
     * @property {?string} component - Component name
     * @property {?string} package - Package name
     * @property {Array<Array<string>>} extras - Optional intent arguments.
     * See above for the detailed description.
     * @property {?string} flags - Intent startup-specific flags as a hexadecimal string.
     * See above for the detailed description.
     */
    /**
     * Send a broadcast intent.
     *
     * @param {BroadcastOptions} opts
     * @returns {string} The command output
     * @throws {Error} If there was a failure while starting the activity
     * or required options are missing
     */
    function mobileBroadcast(opts?: BroadcastOptions): string;
    /**
     * @typedef {Object} StartServiceOptions
     * @property {?string|number} user ['current'] - The user ID for which the service is started.
     * The `current` user id is used by default
     * @property {?boolean} foreground [false] - Set it to `true` if your service must be
     * started as foreground service. This option is ignored if the API level of the
     * device under test is below 26 (Android 8).
     * @property {?string} intent - The name of the service intent to start, for example
     * `com.some.package.name/.YourServiceSubClassName`.
     * @property {?string} action - Action name
     * @property {?string} uri - Unified resource identifier
     * @property {?string} mimeType - Mime type
     * @property {?string} identifier - Optional identifier
     * @property {?string|Array<string>} categories - One or more category names
     * @property {?string} component - Component name
     * @property {?string} package - Package name
     * @property {Array<Array<string>>} extras - Optional intent arguments.
     * See above for the detailed description.
     * @property {?string} flags - Intent startup-specific flags as a hexadecimal string.
     * See above for the detailed description.
     */
    /**
     * Starts the given service intent.
     *
     * @param {StartServiceOptions} opts
     * @returns {string} The command output
     * @throws {Error} If there was a failure while starting the service
     * or required options are missing
     */
    function mobileStartService(opts?: StartServiceOptions): string;
    /**
     * @typedef {Object} StopServiceOptions
     * @property {string|number} user ['current'] - The user ID for which the service is running.
     * The `current` user id is used by default
     * @property {?string} intent - The name of the service intent to stop, for example
     * `com.some.package.name/.YourServiceSubClassName`.
     * @property {?string} action - Action name
     * @property {?string} uri - Unified resource identifier
     * @property {?string} mimeType - Mime type
     * @property {?string} identifier - Optional identifier
     * @property {?string|Array<string>} categories - One or more category names
     * @property {?string} component - Component name
     * @property {?string} package - Package name
     * @property {Array<Array<string>>} extras - Optional intent arguments.
     * See above for the detailed description.
     * @property {?string} flags - See above for the detailed description.
     */
    /**
     * Stops the given service intent.
     *
     * @param {StopServiceOptions} opts
     * @returns {string} The command output
     * @throws {Error} If there was a failure while stopping the service
     * or required options are missing
     */
    function mobileStopService(opts?: StopServiceOptions): string;
}
//# sourceMappingURL=intent.d.ts.map