export default extensions;
export type SetConnectivityOptions = {
    /**
     * Either to enable or disable Wi-Fi.
     * An unset value means to not change the state for the given service.
     */
    wifi: boolean | null;
    /**
     * Either to enable or disable mobile data connection.
     * An unset value means to not change the state for the given service.
     */
    data: boolean | null;
    /**
     * Either to enable to disable the Airplane Mode
     * An unset value means to not change the state for the given service.
     */
    airplaneMode: boolean | null;
};
export type GetConnectivityResult = {
    /**
     * True if wifi is enabled
     */
    wifi: boolean;
    /**
     * True if mobile data connection is enabled
     */
    data: boolean;
    /**
     * True if Airplane Mode is enabled
     */
    airplaneMode: boolean;
};
export type GetConnectivityOptions = {
    /**
     * one or more services to get the connectivity for.
     * Supported service names are: wifi, data, airplaneMode.
     */
    services: string[] | (string | null);
};
export type GpsCacheRefreshOptions = {
    /**
     * [20000] The maximum number of milliseconds
     * to block until GPS cache is refreshed. Providing zero or a negative
     * value to it skips waiting completely.
     */
    timeoutMs: number;
};
export namespace commands {
    function getNetworkConnection(): Promise<number>;
    /**
     * decoupling to override the behaviour in other drivers like UiAutomator2.
     */
    function isWifiOn(): Promise<any>;
    /**
     * @typedef {Object} SetConnectivityOptions
     * @property {boolean?} wifi Either to enable or disable Wi-Fi.
     * An unset value means to not change the state for the given service.
     * @property {boolean?} data Either to enable or disable mobile data connection.
     * An unset value means to not change the state for the given service.
     * @property {boolean?} airplaneMode Either to enable to disable the Airplane Mode
     * An unset value means to not change the state for the given service.
     */
    /**
     * Set the connectivity state for different services
     *
     * @param {SetConnectivityOptions} opts
     * @throws {Error} If none of known properties were provided or there was an error
     * while changing connectivity states
     */
    function mobileSetConnectivity(opts?: SetConnectivityOptions): Promise<void>;
    /**
     * @typedef {Object} GetConnectivityResult
     * @property {boolean} wifi True if wifi is enabled
     * @property {boolean} data True if mobile data connection is enabled
     * @property {boolean} airplaneMode True if Airplane Mode is enabled
     */
    /**
     * @typedef {Object} GetConnectivityOptions
     * @property {string[]|string?} services one or more services to get the connectivity for.
     * Supported service names are: wifi, data, airplaneMode.
     */
    /**
     * Retrieves the connectivity properties from the device under test
     *
     * @param {GetConnectivityOptions?} opts If no service names are provided then the
     * connectivity state is returned for all of them.
     * @returns {GetConnectivityResult}
     */
    function mobileGetConnectivity(opts?: GetConnectivityOptions | null): GetConnectivityResult;
    function setNetworkConnection(type: any): Promise<number>;
    /**
     * decoupling to override behaviour in other drivers like UiAutomator2.
     */
    function setWifiState(wifi: any): Promise<void>;
    function toggleData(): Promise<void>;
    function toggleWiFi(): Promise<void>;
    function toggleFlightMode(): Promise<void>;
    function setGeoLocation(location: any): Promise<{
        latitude: number;
        longitude: number;
        altitude: number;
    }>;
    /**
     * @typedef {Object} GpsCacheRefreshOptions
     * @property {number} timeoutMs [20000] The maximum number of milliseconds
     * to block until GPS cache is refreshed. Providing zero or a negative
     * value to it skips waiting completely.
     */
    /**
     * Sends an async request to refresh the GPS cache.
     * This feature only works if the device under test has
     * Google Play Services installed. In case the vanilla
     * LocationManager is used the device API level must be at
     * version 30 (Android R) or higher.
     *
     * @param {GpsCacheRefreshOptions} opts
     */
    function mobileRefreshGpsCache(opts?: GpsCacheRefreshOptions): Promise<void>;
    function getGeoLocation(): Promise<{
        latitude: number;
        longitude: number;
        altitude: number;
    }>;
    /**
     * Checks if GPS is enabled
     *
     * @returns {Promise<Boolean>} True if yes
     */
    function isLocationServicesEnabled(): Promise<boolean>;
    /**
     * Toggles GPS state
     */
    function toggleLocationServices(): Promise<void>;
}
export namespace helpers {
    function wrapBootstrapDisconnect(wrapped: any): Promise<any>;
}
declare let extensions: {};
//# sourceMappingURL=network.d.ts.map