export default extensions;
export namespace commands {
    /**
     * Starts Android logcat broadcast websocket on the same host and port
     * where Appium server is running at `/ws/session/:sessionId:/appium/logcat` endpoint. The method
     * will return immediately if the web socket is already listening.
     *
     * Each connected websocket listener will receive logcat log lines
     * as soon as they are visible to Appium.
     */
    function mobileStartLogsBroadcast(): Promise<void>;
    /**
     * Stops the previously started logcat broadcasting wesocket server.
     * This method will return immediately if no server is running.
     */
    function mobileStopLogsBroadcast(): Promise<void>;
    function getLogTypes(): Promise<any>;
    function getLog(logType: any): Promise<any>;
}
export let helpers: {};
declare namespace extensions {
    namespace supportedLogTypes {
        namespace logcat {
            const description: string;
            function getter(self: any): Promise<any>;
        }
        namespace bugreport {
            const description_1: string;
            export { description_1 as description };
            export function getter_1(self: any): Promise<any>;
            export { getter_1 as getter };
        }
        namespace server {
            const description_2: string;
            export { description_2 as description };
            export function getter_2(self: any): {
                timestamp: any;
                level: any;
                message: any;
            }[];
            export { getter_2 as getter };
        }
    }
}
//# sourceMappingURL=log.d.ts.map