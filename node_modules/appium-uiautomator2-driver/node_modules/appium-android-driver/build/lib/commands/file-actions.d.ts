export default commands;
export type PullFileOptions = {
    /**
     * The full path to the remote file
     * or a specially formatted path, which points to an item inside an app bundle,
     * for example `@my.app.id/my/path`. It is mandatory for the app bundle to have
     * debugging enabled in order to use the latter remotePath format.
     */
    remotePath: string;
};
export type PushFileOptions = {
    /**
     * The full path to the remote file
     * or a specially formatted path, which points to an item inside an app bundle,
     * for example `@my.app.id/my/path`. It is mandatory for the app bundle to have
     * debugging enabled in order to use the latter remotePath format.
     */
    remotePath: string;
    /**
     * Base64-encoded content of the file to be pushed.
     */
    payload: string;
};
export type PullFolderOptions = {
    /**
     * The full path to the remote folder.
     */
    remotePath: string;
};
export type DeleteFileOpts = {
    /**
     * The full path to the remote file
     * or a file inside an application bundle (for example `@my.app.id/path/in/bundle`)
     */
    remotePath: string;
};
export namespace commands {
    /**
     * Pulls a remote file from the device.
     * It is required, that a package has debugging flag enabled
     * in order to access its files.
     *
     * @param {string} remotePath The full path to the remote file
     * or a specially formatted path, which points to an item inside app bundle
     * @returns {string} Base64 encoded content of the pulled file
     * @throws {Error} If the pull operation failed
     */
    function pullFile(remotePath: string): string;
    /**
     * @typedef {Object} PullFileOptions
     * @property {string} remotePath The full path to the remote file
     * or a specially formatted path, which points to an item inside an app bundle,
     * for example `@my.app.id/my/path`. It is mandatory for the app bundle to have
     * debugging enabled in order to use the latter remotePath format.
     */
    /**
     * Pulls a remote file from the device.
     *
     * @param {PullFileOptions} opts
     * @returns {string} The same as `pullFile`
     */
    function mobilePullFile(opts?: PullFileOptions): string;
    /**
     * Pushes the given data to a file on the remote device
     * It is required, that a package has debugging flag enabled
     * in order to access its files.
     * After a file is pushed it gets automatically scanned for possible
     * media occurrences. If the scan succeeds then the file is added to the
     * media library.
     *
     * @param {string} remotePath The full path to the remote file or
     * a file inside a package bundle
     * @param {string} base64Data Base64 encoded data to be written to the
     * remote file. The remote file will be silently overridden if it already exists.
     * @throws {Error} If there was an error while pushing the data
     */
    function pushFile(remotePath: string, base64Data: string): Promise<void>;
    /**
     * @typedef {Object} PushFileOptions
     * @property {string} remotePath The full path to the remote file
     * or a specially formatted path, which points to an item inside an app bundle,
     * for example `@my.app.id/my/path`. It is mandatory for the app bundle to have
     * debugging enabled in order to use the latter remotePath format.
     * @property {string} payload Base64-encoded content of the file to be pushed.
     */
    /**
     * Pushes the given data to a file on the remote device.
     *
     * @param {PushFileOptions} opts
     */
    function mobilePushFile(opts?: PushFileOptions): Promise<void>;
    /**
     * Pulls the whole folder from the remote device
     *
     * @param {string} remotePath The full path to a folder on the
     * remote device or a folder inside an application bundle
     * @returns {string} Base64-encoded and zipped content of the folder
     * @throws {Error} If there was a failure while getting the folder content
     */
    function pullFolder(remotePath: string): string;
    /**
     * @typedef {Object} PullFolderOptions
     * @property {string} remotePath The full path to the remote folder.
     */
    /**
     * Pulls the whole folder from the device under test.
     *
     * @param {PullFolderOptions} opts
     * @returns {string} The same as `pullFolder`
     */
    function mobilePullFolder(opts?: PullFolderOptions): string;
    /**
     * @typedef {Object} DeleteFileOpts
     * @property {!string} remotePath The full path to the remote file
     * or a file inside an application bundle (for example `@my.app.id/path/in/bundle`)
     */
    /**
     * Deletes a file on the remote device
     *
     * @param {DeleteFileOpts} opts
     * @returns {boolean} `true` if the remote file has been successfully deleted.
     * If the path to a remote file is valid, but the file itself does not exist
     * then `false` is returned.
     * @throws {Error} If the argument is invalid or there was an error while
     * deleting the file
     */
    function mobileDeleteFile(opts?: DeleteFileOpts): boolean;
}
//# sourceMappingURL=file-actions.d.ts.map