export default extensions;
export type DeviceTimeOptions = {
    /**
     * [YYYY-MM-DDTHH:mm:ssZ] - See getDeviceTime#format
     */
    format: string;
};
export type SmsListOptions = {
    /**
     * [100] - The maximum count of recent SMS messages
     * to retrieve
     */
    max: number;
};
export type UnlockOptions = {
    /**
     * The unlock key. The value of this key depends
     * on the actual unlock type and could be a pin/password/pattern value or
     * a biometric finger id.
     * If not provided then the corresponding value from session capabilities is used.
     */
    key: string | null;
    /**
     * The unlock type. The following unlock types
     * are supported: `pin`, `pinWithKeyEvent`, `password`, `pattern` and `fingerprint`.
     * If not provided then the corresponding value from session capabilities is used.
     */
    type: string | null;
    /**
     * Either 'locksettings' (default) or 'uiautomator'.
     * Setting it to 'uiautomator' will enforce the driver to avoid using special
     * ADB shortcuts in order to speed up the unlock procedure.
     */
    strategy: string | null;
    /**
     * [2000] The maximum time in milliseconds
     * to wait until the screen gets unlocked
     */
    timeoutMs: number | null;
};
export namespace commands {
    function keys(keys: any): Promise<void>;
    function doSendKeys(params: any): Promise<any>;
    /**
     * Retrieves the current device's timestamp.
     *
     * @param {string} format - The set of format specifiers. Read
     *                          https://momentjs.com/docs/ to get the full list of supported
     *                          datetime format specifiers. The default format is
     *                          `YYYY-MM-DDTHH:mm:ssZ`, which complies to ISO-8601
     * @return {string} Formatted datetime string or the raw command output if formatting fails
     */
    function getDeviceTime(format?: string): string;
    /**
     * @typedef {Object} DeviceTimeOptions
     * @property {string} format [YYYY-MM-DDTHH:mm:ssZ] - See getDeviceTime#format
     */
    /**
     * Retrieves the current device time
     *
     * @param {DeviceTimeOptions} opts
     * @return {string} Formatted datetime string or the raw command output if formatting fails
     */
    function mobileGetDeviceTime(opts?: DeviceTimeOptions): string;
    function getPageSource(): Promise<any>;
    function back(): Promise<any>;
    function openSettingsActivity(setting: any): Promise<void>;
    function getWindowSize(): Promise<any>;
    function getWindowRect(): Promise<{
        width: any;
        height: any;
        x: number;
        y: number;
    }>;
    function getCurrentActivity(): Promise<any>;
    function getCurrentPackage(): Promise<any>;
    function background(seconds: any): Promise<any>;
    function getStrings(language: any): Promise<{}>;
    function launchApp(): Promise<void>;
    function startActivity(appPackage: any, appActivity: any, appWaitPackage: any, appWaitActivity: any, intentAction: any, intentCategory: any, intentFlags: any, optionalIntentArguments: any, dontStopAppOnReset: any): Promise<void>;
    function reset(): Promise<any>;
    function startAUT(): Promise<void>;
    function setUrl(uri: any): Promise<void>;
    function closeApp(): Promise<void>;
    function getDisplayDensity(): Promise<number | undefined>;
    function mobilePerformEditorAction(opts?: {}): Promise<void>;
    /**
     * Retrieves the list of recent system notifications.
     *
     * @returns {Object} See the documentation on `adb.getNotifications` for
     * more details
     */
    function mobileGetNotifications(): any;
    /**
     * @typedef {Object} SmsListOptions
     * @property {number} max [100] - The maximum count of recent SMS messages
     * to retrieve
     */
    /**
     * Retrieves the list of recent SMS messages with their properties.
     *
     * @param {SmsListOptions} opts
     * @returns {Object} See the documentation on `adb.getSmsList` for
     * more details
     */
    function mobileListSms(opts?: SmsListOptions): any;
    /**
     * @typedef {Object} UnlockOptions
     * @property {string?} key The unlock key. The value of this key depends
     * on the actual unlock type and could be a pin/password/pattern value or
     * a biometric finger id.
     * If not provided then the corresponding value from session capabilities is used.
     * @property {string?} type The unlock type. The following unlock types
     * are supported: `pin`, `pinWithKeyEvent`, `password`, `pattern` and `fingerprint`.
     * If not provided then the corresponding value from session capabilities is used.
     * @property {string?} strategy Either 'locksettings' (default) or 'uiautomator'.
     * Setting it to 'uiautomator' will enforce the driver to avoid using special
     * ADB shortcuts in order to speed up the unlock procedure.
     * @property {number?} timeoutMs [2000] The maximum time in milliseconds
     * to wait until the screen gets unlocked
     */
    /**
     * Unlocks the device if it is locked. Noop if the device's screen is not locked.
     *
     * @param {UnlockOptions} opts
     * @throws {Error} if unlock operation fails or the provided
     * arguments are not valid
     */
    function mobileUnlock(opts?: UnlockOptions): Promise<void>;
}
export let helpers: {};
declare let extensions: {};
//# sourceMappingURL=general.d.ts.map