export default commands;
export type ChangePermissionsOptions = {
    /**
     * If `target` is set to 'pm':
     *   The full name of the permission to be changed
     * or a list of permissions. Check https://developer.android.com/reference/android/Manifest.permission
     * to get the full list of standard Android permssion names. Mandatory argument.
     * If 'all' magic string is passed then the chosen action is going to be applied to all
     * permisisons requested/granted by 'appPackage'.
     * If `target` is set to 'appops':
     *   The full name of the appops permission to be changed
     * or a list of permissions. Check AppOpsManager.java sources to get the full list of
     * supported appops permission names for the given Android pklatform.
     * Examples: 'ACTIVITY_RECOGNITION', 'SMS_FINANCIAL_TRANSACTIONS', 'READ_SMS', 'ACCESS_NOTIFICATIONS'.
     * The 'all' magic string is unsupported.
     */
    permissions: string | Array<string>;
    /**
     * [this.opts.appPackage] The application package to set change
     * permissions on. Defaults to the package name under test.
     */
    appPackage: string;
    /**
     * [grant|allow] One of `PM_ACTION` values if `target` is set to 'pm',
     * otherwise one of `APPOPS_ACTION` values
     */
    action: string;
    /**
     * [pm] Either 'pm' or 'appops'. The 'appops' one requires
     * 'adb_shell' server security option to be enabled.
     */
    target: string;
};
export type GetPermissionsOptions = {
    /**
     * [requested] - One of possible permission types to get.
     * Can be any of `PERMISSIONS_TYPE` values.
     */
    type: string;
    /**
     * [this.opts.appPackage] - The application package to set change
     * permissions on. Defaults to the package name under test.
     */
    appPackage: string;
};
export namespace commands {
    /**
     * @typedef {Object} ChangePermissionsOptions
     * @property {!string|Array<string>} permissions
     * If `target` is set to 'pm':
     *   The full name of the permission to be changed
     * or a list of permissions. Check https://developer.android.com/reference/android/Manifest.permission
     * to get the full list of standard Android permssion names. Mandatory argument.
     * If 'all' magic string is passed then the chosen action is going to be applied to all
     * permisisons requested/granted by 'appPackage'.
     * If `target` is set to 'appops':
     *   The full name of the appops permission to be changed
     * or a list of permissions. Check AppOpsManager.java sources to get the full list of
     * supported appops permission names for the given Android pklatform.
     * Examples: 'ACTIVITY_RECOGNITION', 'SMS_FINANCIAL_TRANSACTIONS', 'READ_SMS', 'ACCESS_NOTIFICATIONS'.
     * The 'all' magic string is unsupported.
     * @property {string} appPackage [this.opts.appPackage] The application package to set change
     * permissions on. Defaults to the package name under test.
     * @property {string} action [grant|allow] One of `PM_ACTION` values if `target` is set to 'pm',
     * otherwise one of `APPOPS_ACTION` values
     * @property {string} target [pm] Either 'pm' or 'appops'. The 'appops' one requires
     * 'adb_shell' server security option to be enabled.
     */
    /**
     * Changes package permissions in runtime.
     *
     * @param {?ChangePermissionsOptions} opts - Available options mapping.
     * @throws {Error} if there was a failure while changing permissions
     */
    function mobileChangePermissions(opts?: ChangePermissionsOptions | null): Promise<any>;
    /**
     * @typedef {Object} GetPermissionsOptions
     * @property {string} type [requested] - One of possible permission types to get.
     * Can be any of `PERMISSIONS_TYPE` values.
     * @property {string} appPackage [this.opts.appPackage] - The application package to set change
     * permissions on. Defaults to the package name under test.
     */
    /**
     * Gets runtime permissions list for the given application package.
     *
     * @param {GetPermissionsOptions} opts - Available options mapping.
     * @returns {Array<string>} The list of retrieved permissions for the given type
     * (can also be empty).
     * @throws {Error} if there was an error while getting permissions.
     */
    function mobileGetPermissions(opts?: GetPermissionsOptions): string[];
}
//# sourceMappingURL=permissions.d.ts.map