export default commands;
export type StartRecordingOptions = {
    /**
     * - The path to the remote location, where the captured video should be uploaded.
     *   The following protocols are supported: http/https, ftp.
     *   Null or empty string value (the default setting) means the content of resulting
     *   file should be encoded as Base64 and passed as the endpount response value.
     *   An exception will be thrown if the generated media file is too big to
     *   fit into the available process memory.
     *   This option only has an effect if there is screen recording process in progreess
     *   and `forceRestart` parameter is not set to `true`.
     */
    remotePath: string | null;
    /**
     * - The name of the user for the remote authentication. Only works if `remotePath` is provided.
     */
    user: string | null;
    /**
     * - The password for the remote authentication. Only works if `remotePath` is provided.
     */
    pass: string | null;
    /**
     * [PUT] - The http multipart upload method name. Only works if `remotePath` is provided.
     */
    method: string | null;
    /**
     * - Additional headers mapping for multipart http(s) uploads
     */
    headers: any | null;
    /**
     * [file] - The name of the form field, where the file content BLOB should be stored for
     *          http(s) uploads
     */
    fileFieldName: string | null;
    /**
     * - Additional form fields for multipart http(s) uploads
     */
    formFields: (any | Array<Pair>) | null;
    /**
     * - The format is widthxheight.
     * The default value is the device's native display resolution (if supported),
     * 1280x720 if not. For best results,
     * use a size supported by your device's Advanced Video Coding (AVC) encoder.
     * For example, "1280x720"
     */
    videoSize: string | null;
    /**
     * - Set it to `true` in order to display additional information on the video overlay,
     *   such as a timestamp, that is helpful in videos captured to illustrate bugs.
     *   This option is only supported since API level 27 (Android P).
     */
    bugReport: boolean | null;
    /**
     * - The maximum recording time, in seconds. The default value is 180 (3 minutes).
     *   The maximum value is 1800 (30 minutes). If the passed value is greater than 180 then
     *   the algorithm will try to schedule multiple screen recording chunks and merge the
     *   resulting videos into a single media file using `ffmpeg` utility.
     *   If the utility is not available in PATH then the most recent screen recording chunk is
     *   going to be returned.
     */
    timeLimit: (string | number) | null;
    /**
     * - The video bit rate for the video, in bits per second.
     * The default value is 4000000 (4 Mbit/s). You can increase the bit rate to improve video quality,
     * but doing so results in larger movie files.
     */
    bitRate: (string | number) | null;
    /**
     * - Whether to try to catch and upload/return the currently running screen recording
     *   (`false`, the default setting) or ignore the result of it and start a new recording
     *   immediately (`true`).
     */
    forceRestart: boolean | null;
};
export type StopRecordingOptions = {
    /**
     * - The path to the remote location, where the resulting video should be uploaded.
     *   The following protocols are supported: http/https, ftp.
     *   Null or empty string value (the default setting) means the content of resulting
     *   file should be encoded as Base64 and passed as the endpount response value.
     *   An exception will be thrown if the generated media file is too big to
     *   fit into the available process memory.
     */
    remotePath: string | null;
    /**
     * - The name of the user for the remote authentication.
     */
    user: string | null;
    /**
     * - The password for the remote authentication.
     */
    pass: string | null;
    /**
     * - The http multipart upload method name. The 'PUT' one is used by default.
     */
    method: string | null;
    /**
     * - Additional headers mapping for multipart http(s) uploads
     */
    headers: any | null;
    /**
     * [file] - The name of the form field, where the file content BLOB should be stored for
     *          http(s) uploads
     */
    fileFieldName: string | null;
    /**
     * - Additional form fields for multipart http(s) uploads
     */
    formFields: (any | Array<Pair>) | null;
};
export namespace commands {
    /**
     * @typedef {Object} StartRecordingOptions
     *
     * @property {?string} remotePath - The path to the remote location, where the captured video should be uploaded.
     *                                  The following protocols are supported: http/https, ftp.
     *                                  Null or empty string value (the default setting) means the content of resulting
     *                                  file should be encoded as Base64 and passed as the endpount response value.
     *                                  An exception will be thrown if the generated media file is too big to
     *                                  fit into the available process memory.
     *                                  This option only has an effect if there is screen recording process in progreess
     *                                  and `forceRestart` parameter is not set to `true`.
     * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.
     * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.
     * @property {?string} method [PUT] - The http multipart upload method name. Only works if `remotePath` is provided.
     * @property {?Object} headers - Additional headers mapping for multipart http(s) uploads
     * @property {?string} fileFieldName [file] - The name of the form field, where the file content BLOB should be stored for
     *                                            http(s) uploads
     * @property {?Object|Array<Pair>} formFields - Additional form fields for multipart http(s) uploads
     * @property {?string} videoSize - The format is widthxheight.
     *                  The default value is the device's native display resolution (if supported),
     *                  1280x720 if not. For best results,
     *                  use a size supported by your device's Advanced Video Coding (AVC) encoder.
     *                  For example, "1280x720"
     * @property {?boolean} bugReport - Set it to `true` in order to display additional information on the video overlay,
     *                                  such as a timestamp, that is helpful in videos captured to illustrate bugs.
     *                                  This option is only supported since API level 27 (Android P).
     * @property {?string|number} timeLimit - The maximum recording time, in seconds. The default value is 180 (3 minutes).
     *                                        The maximum value is 1800 (30 minutes). If the passed value is greater than 180 then
     *                                        the algorithm will try to schedule multiple screen recording chunks and merge the
     *                                        resulting videos into a single media file using `ffmpeg` utility.
     *                                        If the utility is not available in PATH then the most recent screen recording chunk is
     *                                        going to be returned.
     * @property {?string|number} bitRate - The video bit rate for the video, in bits per second.
     *                The default value is 4000000 (4 Mbit/s). You can increase the bit rate to improve video quality,
     *                but doing so results in larger movie files.
     * @property {?boolean} forceRestart - Whether to try to catch and upload/return the currently running screen recording
     *                                     (`false`, the default setting) or ignore the result of it and start a new recording
     *                                     immediately (`true`).
     */
    /**
     * Record the display of a real devices running Android 4.4 (API level 19) and higher.
     * Emulators are supported since API level 27 (Android P).
     * It records screen activity to an MPEG-4 file. Audio is not recorded with the video file.
     * If screen recording has been already started then the command will stop it forcefully and start a new one.
     * The previously recorded video file will be deleted.
     *
     * @param {?StartRecordingOptions} options - The available options.
     * @returns {string} Base64-encoded content of the recorded media file if
     *                   any screen recording is currently running or an empty string.
     * @throws {Error} If screen recording has failed to start or is not supported on the device under test.
     */
    function startRecordingScreen(options?: StartRecordingOptions | null): string;
    /**
     * @typedef {Object} StopRecordingOptions
     *
     * @property {?string} remotePath - The path to the remote location, where the resulting video should be uploaded.
     *                                  The following protocols are supported: http/https, ftp.
     *                                  Null or empty string value (the default setting) means the content of resulting
     *                                  file should be encoded as Base64 and passed as the endpount response value.
     *                                  An exception will be thrown if the generated media file is too big to
     *                                  fit into the available process memory.
     * @property {?string} user - The name of the user for the remote authentication.
     * @property {?string} pass - The password for the remote authentication.
     * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.
     * @property {?Object} headers - Additional headers mapping for multipart http(s) uploads
     * @property {?string} fileFieldName [file] - The name of the form field, where the file content BLOB should be stored for
     *                                            http(s) uploads
     * @property {?Object|Array<Pair>} formFields - Additional form fields for multipart http(s) uploads
     */
    /**
     * Stop recording the screen.
     * If no screen recording has been started before then the method returns an empty string.
     *
     * @param {?StopRecordingOptions} options - The available options.
     * @returns {string} Base64-encoded content of the recorded media file if 'remotePath'
     *                   parameter is falsy or an empty string.
     * @throws {Error} If there was an error while getting the name of a media file
     *                 or the file content cannot be uploaded to the remote location
     *                 or screen recording is not supported on the device under test.
     */
    function stopRecordingScreen(options?: StopRecordingOptions | null): string;
}
//# sourceMappingURL=recordscreen.d.ts.map