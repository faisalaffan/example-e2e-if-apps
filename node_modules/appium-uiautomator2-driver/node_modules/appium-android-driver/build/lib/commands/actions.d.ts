export default extensions;
export type LockOptions = {
    /**
     * The number to keep the locked.
     * 0 or empty value will keep the device locked.
     */
    seconds: number | null;
};
export type FingerprintOpts = any;
export type SendSmsOptions = {
    /**
     * The phone number to send SMS to
     */
    phoneNumber: string;
    /**
     * The message payload
     */
    message: string;
};
export type GsmCallOptions = {
    /**
     * The phone number to call to
     */
    phoneNumber: string;
    /**
     * One of possible actions to take
     */
    action: call | accept | cancel | hold;
};
export type GsmSignalOptions = {
    /**
     * One of possible signal strength values, where 4 is the best signal.
     */
    strength: 0 | 1 | 2 | 3 | 4;
};
export type GsmVoiceOptions = {
    state: on | off;
};
export type PowerAcOptions = {
    state: on | off;
};
export type PowerCapacityOptions = {
    /**
     * - Percentage value in range [0, 100]
     */
    percent: number;
};
export type NetworkSpeedOptions = {
    speed: gsm | scsd | gprs | edge | umts | hsdpa | lte | evdo | full;
};
/**
 * Emulate sensors values on the connected emulator.
 */
export type Sensor = {
    /**
     * - sensor type declared in adb.SENSORS
     */
    sensorType: string;
    /**
     * - value to set to the sensor
     */
    value: string;
};
export namespace commands {
    function keyevent(keycode: any, metastate?: null): Promise<any>;
    function pressKeyCode(keycode: any, metastate?: null): Promise<any>;
    function longPressKeyCode(keycode: any, metastate?: null): Promise<any>;
    function getOrientation(): Promise<any>;
    function setOrientation(orientation: any): Promise<any>;
    function fakeFlick(xSpeed: any, ySpeed: any): Promise<any>;
    function fakeFlickElement(elementId: any, xoffset: any, yoffset: any, speed: any): Promise<any>;
    function swipe(startX: any, startY: any, endX: any, endY: any, duration: any, touchCount: any, elId: any): Promise<any>;
    function doSwipe(swipeOpts: any): Promise<any>;
    function pinchClose(startX: any, startY: any, endX: any, endY: any, duration: any, percent: any, steps: any, elId: any): Promise<any>;
    function pinchOpen(startX: any, startY: any, endX: any, endY: any, duration: any, percent: any, steps: any, elId: any): Promise<any>;
    function flick(element: any, xSpeed: any, ySpeed: any, xOffset: any, yOffset: any, speed: any): Promise<void>;
    function drag(startX: any, startY: any, endX: any, endY: any, duration: any, touchCount: any, elementId: any, destElId: any): Promise<any>;
    function doDrag(dragOpts: any): Promise<any>;
    /**
     * @typedef {Object} LockOptions
     * @property {number?} seconds The number to keep the locked.
     * 0 or empty value will keep the device locked.
     */
    /**
     * Lock the device (and optionally unlock it after a certain amount of time).
    
     * @param {LockOptions} opts
     * @throws {Error} if lock or unlock operation fails
     */
    function mobileLock(opts?: LockOptions): Promise<void>;
    function lock(seconds: any): Promise<void>;
    function isLocked(): Promise<any>;
    function unlock(): Promise<void>;
    function openNotifications(): Promise<any>;
    function setLocation(latitude: any, longitude: any): Promise<any>;
    function fingerprint(fingerprintId: any): Promise<void>;
    /**
     * @typedef {Object} FingerprintOpts
     * @param {string|number} fingerprintId The value is the finger_id for the finger that
     * was "scanned". It is a unique integer that you assign for each virtual fingerprint.
     * When the app is running you can run this same command each time the
     * emulator prompts you for a fingerprint, you can run the adb command and pass it
     * the finger_id to simulate the fingerprint scan.
     */
    /**
     * Emulate fingerprint on Android Emulator.
     * Only works on API 23+
     *
     * @param {FingerprintOpts} opts
     */
    function mobileFingerprint(opts?: any): Promise<void>;
    function sendSMS(phoneNumber: any, message: any): Promise<void>;
    /**
     * @typedef {Object} SendSmsOptions
     * @property {string} phoneNumber The phone number to send SMS to
     * @property {string} message The message payload
     */
    /**
     * Emulate sending an SMS to the given phone number.
     * Only works on emulators.
     *
     * @param {SendSmsOptions} opts
     */
    function mobileSendSms(opts?: SendSmsOptions): Promise<void>;
    function gsmCall(phoneNumber: any, action: any): Promise<void>;
    /**
     * @typedef {Object} GsmCallOptions
     * @property {string} phoneNumber The phone number to call to
     * @property {call|accept|cancel|hold} action One of possible actions to take
     */
    /**
     * Emulate a GSM call to the given phone number.
     * Only works on emulators.
     *
     * @param {GsmCallOptions} opts
     */
    function mobileGsmCall(opts?: GsmCallOptions): Promise<void>;
    function gsmSignal(signalStrengh: any): Promise<void>;
    /**
     * @typedef {Object} GsmSignalOptions
     * @property {0|1|2|3|4} strength One of possible signal strength values, where 4 is the best signal.
     */
    /**
     * Emulate GSM signal strength change event.
     * Only works on emulators.
     *
     * @param {GsmSignalOptions} opts
     */
    function mobileGsmSignal(opts?: GsmSignalOptions): Promise<void>;
    function gsmVoice(state: any): Promise<void>;
    /**
     * @typedef {Object} GsmVoiceOptions
     * @property {on|off} state
     */
    /**
     * Emulate GSM voice state change event.
     * Only works on emulators.
     *
     * @param {GsmVoiceOptions} opts
     */
    function mobileGsmVoice(opts?: GsmVoiceOptions): Promise<void>;
    function powerAC(state: any): Promise<void>;
    /**
     * @typedef {Object} PowerAcOptions
     * @property {on|off} state
     */
    /**
     * Emulate AC power state change.
     * Only works on emulators.
     *
     * @param {GsmVoiceOptions} opts
     */
    function mobilePowerAc(opts?: GsmVoiceOptions): Promise<void>;
    function powerCapacity(batteryPercent: any): Promise<void>;
    /**
     * @typedef {Object} PowerCapacityOptions
     * @property {number} percent - Percentage value in range [0, 100]
     */
    /**
     * Emulate power capacity change.
     * Only works on emulators.
     *
     * @param {PowerCapacityOptions} opts
     */
    function mobilePowerCapacity(opts?: PowerCapacityOptions): Promise<void>;
    function networkSpeed(networkSpeed: any): Promise<void>;
    /**
     * @typedef {Object} NetworkSpeedOptions
     * @property {gsm|scsd|gprs|edge|umts|hsdpa|lte|evdo|full} speed
     */
    /**
     * Emulate different network connection speed modes.
     * Only works on emulators.
     *
     * @param {NetworkSpeedOptions} opts
     */
    function mobileNetworkSpeed(opts?: NetworkSpeedOptions): Promise<void>;
    /**
     * Emulate sensors values on the connected emulator.
     *
     * @typedef {Object} Sensor
     * @property {string} sensorType - sensor type declared in adb.SENSORS
     * @property {string} value - value to set to the sensor
     *
     * @param {Object} Sensor
     * @throws {Error} - If sensorType is not defined
     * @throws {Error} - If value for the se sor is not defined
     * @throws {Error} - If deviceType is not an emulator
     */
    function sensorSet(sensor?: {}): Promise<void>;
    function getScreenshot(): Promise<any>;
}
export namespace helpers {
    /**
     * @param {ADB} adb
     * @param {Object} opts
     * @returns {Promise<Buffer>}
     */
    function getScreenshotDataWithAdbShell(adb: ADB, opts: any): Promise<Buffer>;
    /**
     * @param {ADB} adb
     * @returns {Promise<Buffer>}
     */
    function getScreenshotDataWithAdbExecOut(adb: ADB): Promise<Buffer>;
}
declare const extensions: {};
//# sourceMappingURL=actions.d.ts.map