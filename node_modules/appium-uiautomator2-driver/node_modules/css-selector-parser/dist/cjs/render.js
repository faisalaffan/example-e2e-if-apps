"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = void 0;
var utils_js_1 = require("./utils.js");
function renderNamespace(namespace) {
    if (namespace.type === 'WildcardNamespace') {
        return '*|';
    }
    else if (namespace.type === 'NamespaceName') {
        return "".concat((0, utils_js_1.escapeIdentifier)(namespace.name), "|");
    }
    else if (namespace.type === 'NoNamespace') {
        return '|';
    }
    throw new Error("Unknown namespace type: ".concat(namespace.type, "."));
}
function renderSubstitution(sub) {
    return "$".concat((0, utils_js_1.escapeIdentifier)(sub.name));
}
function renderFormula(a, b) {
    if (a) {
        var result = "".concat(a === 1 ? '' : a === -1 ? '-' : a, "n");
        if (b) {
            result += "".concat(b > 0 ? '+' : '').concat(b);
        }
        return result;
    }
    else {
        return String(b);
    }
}
/**
 * Renders CSS Selector AST back to a string.
 *
 * @example
 *
 * import {ast, render} from 'css-selector-parser';
 *
 * const selector = ast.selector({
 *     rules: [
 *         ast.rule({
 *             tag: ast.tagName({name: 'a'}),
 *             ids: ['user-23'],
 *             classNames: ['user'],
 *             pseudoClasses: [ast.pseudoClass({name: 'visited'})]
 *         })
 *     ]
 * });
 *
 * console.log(render(selector)); // a#user-23.user:visited
 */
function render(entity) {
    if (entity.type === 'Selector') {
        return entity.rules.map(render).join(', ');
    }
    if (entity.type === 'Rule') {
        var result = '';
        var tag = entity.tag, ids = entity.ids, classNames = entity.classNames, attributes = entity.attributes, pseudoClasses = entity.pseudoClasses, pseudoElement = entity.pseudoElement, combinator = entity.combinator, nestedRule = entity.nestedRule;
        if (combinator) {
            result += "".concat(combinator, " ");
        }
        if (tag) {
            var namespace = tag.namespace;
            if (namespace) {
                result += renderNamespace(namespace);
            }
            if (tag.type === 'TagName') {
                result += (0, utils_js_1.escapeIdentifier)(tag.name);
            }
            else if (tag.type === 'WildcardTag') {
                result += '*';
            }
            else {
                throw new Error("Unknown tagName type: ".concat(tag.type, "."));
            }
        }
        if (ids) {
            for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {
                var id = ids_1[_i];
                result += "#".concat((0, utils_js_1.escapeIdentifier)(id));
            }
        }
        if (classNames) {
            for (var _a = 0, classNames_1 = classNames; _a < classNames_1.length; _a++) {
                var className = classNames_1[_a];
                result += ".".concat((0, utils_js_1.escapeIdentifier)(className));
            }
        }
        if (attributes) {
            for (var _b = 0, attributes_1 = attributes; _b < attributes_1.length; _b++) {
                var _c = attributes_1[_b], name_1 = _c.name, namespace = _c.namespace, operator = _c.operator, value = _c.value, caseSensitivityModifier = _c.caseSensitivityModifier;
                result += '[';
                if (namespace) {
                    result += renderNamespace(namespace);
                }
                result += (0, utils_js_1.escapeIdentifier)(name_1);
                if (operator && value) {
                    result += operator;
                    if (value.type === 'String') {
                        result += (0, utils_js_1.escapeStr)(value.value);
                    }
                    else if (value.type === 'Substitution') {
                        result += renderSubstitution(value);
                    }
                    else {
                        throw new Error("Unknown attribute value type: ".concat(value.type, "."));
                    }
                    if (caseSensitivityModifier) {
                        result += " ".concat((0, utils_js_1.escapeIdentifier)(caseSensitivityModifier));
                    }
                }
                result += ']';
            }
        }
        if (pseudoClasses) {
            for (var _d = 0, pseudoClasses_1 = pseudoClasses; _d < pseudoClasses_1.length; _d++) {
                var _e = pseudoClasses_1[_d], name_2 = _e.name, argument = _e.argument;
                result += ":".concat((0, utils_js_1.escapeIdentifier)(name_2));
                if (argument) {
                    result += '(';
                    if (argument.type === 'Selector') {
                        result += render(argument);
                    }
                    else if (argument.type === 'String') {
                        result += (0, utils_js_1.escapePseudoClassString)(argument.value);
                    }
                    else if (argument.type === 'Formula') {
                        result += renderFormula(argument.a, argument.b);
                    }
                    else if (argument.type === 'FormulaOfSelector') {
                        result += renderFormula(argument.a, argument.b);
                        result += ' of ';
                        result += render(argument.selector);
                    }
                    else if (argument.type === 'Substitution') {
                        result += renderSubstitution(argument);
                    }
                    else {
                        throw new Error("Unknown pseudo-class argument type: ".concat(argument.type, "."));
                    }
                    result += ')';
                }
            }
        }
        if (pseudoElement) {
            result += "::".concat((0, utils_js_1.escapeIdentifier)(pseudoElement));
        }
        if (nestedRule) {
            result += " ".concat(render(nestedRule));
        }
        return result;
    }
    throw new Error('Render method accepts only Selector, Rule and RuleList.');
}
exports.render = render;
