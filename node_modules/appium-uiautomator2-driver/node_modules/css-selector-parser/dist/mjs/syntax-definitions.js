const emptyXmlOptions = {};
const defaultXmlOptions = { wildcard: true };
export function getXmlOptions(param) {
    if (param) {
        if (typeof param === 'boolean') {
            return defaultXmlOptions;
        }
        else {
            return param;
        }
    }
    else {
        return emptyXmlOptions;
    }
}
export function extendSyntaxDefinition(base, extension) {
    const result = { ...base };
    if ('tag' in extension) {
        if (extension.tag) {
            result.tag = { ...getXmlOptions(base.tag) };
            const extensionOptions = getXmlOptions(extension.tag);
            if ('wildcard' in extensionOptions) {
                result.tag.wildcard = extensionOptions.wildcard;
            }
        }
        else {
            result.tag = undefined;
        }
    }
    if ('ids' in extension) {
        result.ids = extension.ids;
    }
    if ('classNames' in extension) {
        result.classNames = extension.classNames;
    }
    if ('namespace' in extension) {
        if (extension.namespace) {
            result.namespace = { ...getXmlOptions(base.namespace) };
            const extensionOptions = getXmlOptions(extension.namespace);
            if ('wildcard' in extensionOptions) {
                result.namespace.wildcard = extensionOptions.wildcard;
            }
        }
        else {
            result.namespace = undefined;
        }
    }
    if ('combinators' in extension) {
        if (extension.combinators) {
            result.combinators = result.combinators
                ? result.combinators.concat(extension.combinators)
                : extension.combinators;
        }
        else {
            result.combinators = undefined;
        }
    }
    if ('attributes' in extension) {
        if (extension.attributes) {
            result.attributes = { ...base.attributes };
            if ('unknownCaseSensitivityModifiers' in extension.attributes) {
                result.attributes.unknownCaseSensitivityModifiers =
                    extension.attributes.unknownCaseSensitivityModifiers;
            }
            if ('operators' in extension.attributes) {
                result.attributes.operators = extension.attributes.operators
                    ? result.attributes.operators
                        ? result.attributes.operators.concat(extension.attributes.operators)
                        : extension.attributes.operators
                    : undefined;
            }
            if ('caseSensitivityModifiers' in extension.attributes) {
                result.attributes.caseSensitivityModifiers = extension.attributes.caseSensitivityModifiers
                    ? result.attributes.caseSensitivityModifiers
                        ? result.attributes.caseSensitivityModifiers.concat(extension.attributes.caseSensitivityModifiers)
                        : extension.attributes.caseSensitivityModifiers
                    : undefined;
            }
        }
        else {
            result.attributes = undefined;
        }
    }
    if ('pseudoElements' in extension) {
        if (extension.pseudoElements) {
            result.pseudoElements = { ...base.pseudoElements };
            if ('unknown' in extension.pseudoElements) {
                result.pseudoElements.unknown = extension.pseudoElements.unknown;
            }
            if ('notation' in extension.pseudoElements) {
                result.pseudoElements.notation = extension.pseudoElements.notation;
            }
            if ('definitions' in extension.pseudoElements) {
                result.pseudoElements.definitions = extension.pseudoElements.definitions
                    ? result.pseudoElements.definitions
                        ? result.pseudoElements.definitions.concat(extension.pseudoElements.definitions)
                        : extension.pseudoElements.definitions
                    : undefined;
            }
        }
        else {
            result.pseudoElements = undefined;
        }
    }
    if ('pseudoClasses' in extension) {
        if (extension.pseudoClasses) {
            result.pseudoClasses = { ...base.pseudoClasses };
            if ('unknown' in extension.pseudoClasses) {
                result.pseudoClasses.unknown = extension.pseudoClasses.unknown;
            }
            if ('definitions' in extension.pseudoClasses) {
                const newDefinitions = extension.pseudoClasses.definitions;
                if (newDefinitions) {
                    result.pseudoClasses.definitions = {
                        ...result.pseudoClasses.definitions
                    };
                    const existingDefinitions = result.pseudoClasses.definitions;
                    for (const key of Object.keys(newDefinitions)) {
                        const newDefinitionForNotation = newDefinitions[key];
                        const existingDefinitionForNotation = existingDefinitions[key];
                        if (newDefinitionForNotation) {
                            existingDefinitions[key] = existingDefinitionForNotation
                                ? existingDefinitionForNotation.concat(newDefinitionForNotation)
                                : newDefinitionForNotation;
                        }
                        else {
                            existingDefinitions[key] = undefined;
                        }
                    }
                }
                else {
                    result.pseudoClasses.definitions = undefined;
                }
            }
        }
        else {
            result.pseudoClasses = undefined;
        }
    }
    return result;
}
const css1SyntaxDefinition = {
    tag: {},
    ids: true,
    classNames: true,
    combinators: [],
    pseudoElements: {
        unknown: 'reject',
        notation: 'singleColon',
        definitions: ['first-letter', 'first-line']
    },
    pseudoClasses: {
        unknown: 'reject',
        definitions: {
            NoArgument: ['link', 'visited', 'active']
        }
    }
};
const css2SyntaxDefinition = extendSyntaxDefinition(css1SyntaxDefinition, {
    tag: { wildcard: true },
    combinators: ['>', '+'],
    attributes: {
        unknownCaseSensitivityModifiers: 'reject',
        operators: ['=', '~=', '|=']
    },
    pseudoElements: {
        definitions: ['before', 'after']
    },
    pseudoClasses: {
        unknown: 'reject',
        definitions: {
            NoArgument: ['hover', 'focus', 'first-child'],
            String: ['lang']
        }
    }
});
const selectors3SyntaxDefinition = extendSyntaxDefinition(css2SyntaxDefinition, {
    namespace: {
        wildcard: true
    },
    combinators: ['~'],
    attributes: {
        operators: ['^=', '$=', '*=']
    },
    pseudoElements: {
        notation: 'both'
    },
    pseudoClasses: {
        definitions: {
            NoArgument: [
                'root',
                'last-child',
                'first-of-type',
                'last-of-type',
                'only-child',
                'only-of-type',
                'empty',
                'target',
                'enabled',
                'disabled',
                'checked',
                'indeterminate'
            ],
            Formula: ['nth-child', 'nth-last-child', 'nth-of-type', 'nth-last-of-type'],
            Selector: ['not']
        }
    }
});
const selectors4SyntaxDefinition = extendSyntaxDefinition(selectors3SyntaxDefinition, {
    combinators: ['||'],
    attributes: {
        caseSensitivityModifiers: ['i', 'I', 's', 'S']
    },
    pseudoClasses: {
        definitions: {
            NoArgument: [
                'any-link',
                'local-link',
                'target-within',
                'scope',
                'current',
                'past',
                'future',
                'focus-within',
                'focus-visible',
                'read-write',
                'read-only',
                'placeholder-shown',
                'default',
                'valid',
                'invalid',
                'in-range',
                'out-of-range',
                'required',
                'optional',
                'blank',
                'user-invalid'
            ],
            Formula: ['nth-col', 'nth-last-col'],
            String: ['dir'],
            FormulaOfSelector: ['nth-child', 'nth-last-child'],
            Selector: ['current', 'is', 'where', 'has']
        }
    }
});
const progressiveSyntaxDefinition = extendSyntaxDefinition(selectors4SyntaxDefinition, {
    pseudoElements: {
        unknown: 'accept'
    },
    pseudoClasses: {
        unknown: 'accept'
    },
    attributes: {
        unknownCaseSensitivityModifiers: 'accept'
    }
});
export const cssSyntaxDefinitions = {
    css1: css1SyntaxDefinition,
    css2: css2SyntaxDefinition,
    css3: selectors3SyntaxDefinition,
    'selectors-3': selectors3SyntaxDefinition,
    'selectors-4': selectors4SyntaxDefinition,
    latest: selectors4SyntaxDefinition,
    progressive: progressiveSyntaxDefinition
};
