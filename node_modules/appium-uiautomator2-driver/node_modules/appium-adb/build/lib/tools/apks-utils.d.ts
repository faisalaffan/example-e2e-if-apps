export default apksUtilsMethods;
export type InstallMultipleApksOptions = {
    /**
     * - The number of milliseconds to wait until
     * the installation is completed
     */
    timeout?: string | number | null | undefined;
    /**
     * - The timeout option name
     * users can increase the timeout.
     */
    timeoutCapName?: string | undefined;
    /**
     * - Set to true in order to allow test
     * packages installation.
     */
    allowTestPackages?: boolean | undefined;
    /**
     * - Set to true to install the app on sdcard
     * instead of the device memory.
     */
    useSdcard?: boolean | undefined;
    /**
     * - Set to true in order to grant all the
     * permissions requested in the application's manifest automatically after the installation
     * is completed under Android 6+.
     */
    grantPermissions?: boolean | undefined;
    /**
     * - Install apks partially. It is used for 'install-multiple'.
     * https://android.stackexchange.com/questions/111064/what-is-a-partial-application-install-via-adb
     */
    partialInstall?: boolean | undefined;
};
export type InstallApksOptions = {
    /**
     * [120000] - The number of milliseconds to wait until
     * the installation is completed
     */
    timeout: (number | string) | null;
    /**
     * [androidInstallTimeout] - The timeout option name
     * users can increase the timeout.
     */
    timeoutCapName: string;
    /**
     * [false] - Set to true in order to allow test
     * packages installation.
     */
    allowTestPackages: boolean;
    /**
     * [false] - Set to true in order to grant all the
     * permissions requested in the application's manifest automatically after the installation
     * is completed under Android 6+.
     */
    grantPermissions: boolean;
};
export type ApksUtils = typeof apksUtilsMethods;
declare namespace apksUtilsMethods {
    /**
     * Executes bundletool utility with given arguments and returns the actual stdout
     *
     * @param {Array<String>} args - the list of bundletool arguments
     * @param {string} errorMsg - The customized error message string
     * @returns {Promise<string>} the actual command stdout
     * @throws {Error} If bundletool jar does not exist in PATH or there was an error while
     * executing it
     */
    function execBundletool(args: string[], errorMsg: string): Promise<string>;
    /**
     * @param {string} specLocation - The full path to the generated device spec location
     * @returns {Promise<string>} The same `specLocation` value
     * @throws {Error} If it is not possible to retrieve the spec for the current device
     */
    function getDeviceSpec(specLocation: string): Promise<string>;
    /**
     * @typedef {Object} InstallMultipleApksOptions
     * @property {?number|string} [timeout=20000] - The number of milliseconds to wait until
     * the installation is completed
     * @property {string} [timeoutCapName=androidInstallTimeout] - The timeout option name
     * users can increase the timeout.
     * @property {boolean} [allowTestPackages=false] - Set to true in order to allow test
     * packages installation.
     * @property {boolean} [useSdcard=false] - Set to true to install the app on sdcard
     * instead of the device memory.
     * @property {boolean} [grantPermissions=false] - Set to true in order to grant all the
     * permissions requested in the application's manifest automatically after the installation
     * is completed under Android 6+.
     * @property {boolean} [partialInstall=false] - Install apks partially. It is used for 'install-multiple'.
     * https://android.stackexchange.com/questions/111064/what-is-a-partial-application-install-via-adb
     */
    /**
     * Installs the given apks into the device under test
     *
     * @param {Array<string>} apkPathsToInstall - The full paths to install apks
     * @param {?InstallMultipleApksOptions} options - Installation options
     */
    function installMultipleApks(apkPathsToInstall: string[], options?: InstallMultipleApksOptions | null): Promise<any>;
    /**
     * @typedef {Object} InstallApksOptions
     * @property {?number|string} timeout [120000] - The number of milliseconds to wait until
     * the installation is completed
     * @property {string} timeoutCapName [androidInstallTimeout] - The timeout option name
     * users can increase the timeout.
     * @property {boolean} allowTestPackages [false] - Set to true in order to allow test
     * packages installation.
     * @property {boolean} grantPermissions [false] - Set to true in order to grant all the
     * permissions requested in the application's manifest automatically after the installation
     * is completed under Android 6+.
     */
    /**
     * Installs the given .apks package into the device under test
     *
     * @param {string} apks - The full path to the .apks file
     * @param {?InstallApksOptions} options - Installation options
     * @throws {Error} If the .apks bundle cannot be installed
     */
    function installApks(apks: string, options?: InstallApksOptions | null): Promise<void>;
    /**
     * Extracts and returns the full path to the master .apk file inside the bundle.
     *
     * @param {string} apks - The full path to the .apks file
     * @returns {Promise<string>} The full path to the master bundle .apk
     * @throws {Error} If there was an error while extracting/finding the file
     */
    function extractBaseApk(apks: string): Promise<string>;
    /**
     * Extracts and returns the full path to the .apk, which contains the corresponding
     * resources for the given language in the .apks bundle.
     *
     * @param {string} apks - The full path to the .apks file
     * @param {?string} language - The language abbreviation. The default language is
     * going to be selected if it is not set.
     * @returns {Promise<string>} The full path to the corresponding language .apk or the master .apk
     * if language split is not enabled for the bundle.
     * @throws {Error} If there was an error while extracting/finding the file
     */
    function extractLanguageApk(apks: string, language?: string | null): Promise<string>;
    function isTestPackageOnlyError(output: any): boolean;
}
//# sourceMappingURL=apks-utils.d.ts.map