"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _driver = require("appium/driver");
var _extensions = require("../extensions");
let extensions = {},
  commands = {},
  helpers = {};
commands.getPageSource = async function () {
  return await this.uiautomator2.jwproxy.command('/source', 'GET', {});
};
commands.getClipboard = async function () {
  return (await this.adb.getApiLevel()) < 29 ? await this.uiautomator2.jwproxy.command('/appium/device/get_clipboard', 'POST', {}) : await this.adb.getClipboard();
};
commands.doSendKeys = async function (params) {
  await this.uiautomator2.jwproxy.command('/keys', 'POST', params);
};
commands.keyevent = async function (keycode, metastate) {
  this.log.debug(`Ignoring metastate ${metastate}`);
  await this.adb.keyevent(keycode);
};
commands.back = async function () {
  await this.adb.keyevent(4);
};
commands.getDisplayDensity = async function getDisplayDensity() {
  return await this.uiautomator2.jwproxy.command('/appium/device/display_density', 'GET', {});
};
commands.getWindowSize = async function () {
  return await this.uiautomator2.jwproxy.command('/window/current/size', 'GET', {});
};
commands.getWindowRect = async function () {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    width,
    height,
    x: 0,
    y: 0
  };
};
extensions.executeMobile = async function (mobileCommand, opts = {}) {
  const mobileCommandsMapping = {
    shell: 'mobileShell',
    execEmuConsoleCommand: 'mobileExecEmuConsoleCommand',
    dragGesture: 'mobileDragGesture',
    flingGesture: 'mobileFlingGesture',
    doubleClickGesture: 'mobileDoubleClickGesture',
    clickGesture: 'mobileClickGesture',
    longClickGesture: 'mobileLongClickGesture',
    pinchCloseGesture: 'mobilePinchCloseGesture',
    pinchOpenGesture: 'mobilePinchOpenGesture',
    swipeGesture: 'mobileSwipeGesture',
    scrollGesture: 'mobileScrollGesture',
    scrollBackTo: 'mobileScrollBackTo',
    scroll: 'mobileScroll',
    viewportScreenshot: 'mobileViewportScreenshot',
    viewportRect: 'mobileViewPortRect',
    deepLink: 'mobileDeepLink',
    startLogsBroadcast: 'mobileStartLogsBroadcast',
    stopLogsBroadcast: 'mobileStopLogsBroadcast',
    acceptAlert: 'mobileAcceptAlert',
    dismissAlert: 'mobileDismissAlert',
    batteryInfo: 'mobileGetBatteryInfo',
    deviceInfo: 'mobileGetDeviceInfo',
    getDeviceTime: 'mobileGetDeviceTime',
    changePermissions: 'mobileChangePermissions',
    getPermissions: 'mobileGetPermissions',
    performEditorAction: 'mobilePerformEditorAction',
    startScreenStreaming: 'mobileStartScreenStreaming',
    stopScreenStreaming: 'mobileStopScreenStreaming',
    getNotifications: 'mobileGetNotifications',
    openNotifications: 'openNotifications',
    listSms: 'mobileListSms',
    type: 'mobileType',
    replaceElementValue: 'mobileReplaceElementValue',
    pushFile: 'mobilePushFile',
    pullFile: 'mobilePullFile',
    pullFolder: 'mobilePullFolder',
    deleteFile: 'mobileDeleteFile',
    isAppInstalled: 'mobileIsAppInstalled',
    queryAppState: 'mobileQueryAppState',
    activateApp: 'mobileActivateApp',
    removeApp: 'mobileRemoveApp',
    terminateApp: 'mobileTerminateApp',
    installApp: 'mobileInstallApp',
    clearApp: 'mobileClearApp',
    backgroundApp: 'mobileBackgroundApp',
    getCurrentActivity: 'getCurrentActivity',
    getCurrentPackage: 'getCurrentPackage',
    startActivity: 'mobileStartActivity',
    startService: 'mobileStartService',
    stopService: 'mobileStopService',
    broadcast: 'mobileBroadcast',
    getContexts: 'mobileGetContexts',
    getAppStrings: 'mobileGetAppStrings',
    installMultipleApks: 'mobileInstallMultipleApks',
    lock: 'mobileLock',
    unlock: 'mobileUnlock',
    isLocked: 'isLocked',
    refreshGpsCache: 'mobileRefreshGpsCache',
    startMediaProjectionRecording: 'mobileStartMediaProjectionRecording',
    isMediaProjectionRecordingRunning: 'mobileIsMediaProjectionRecordingRunning',
    stopMediaProjectionRecording: 'mobileStopMediaProjectionRecording',
    getConnectivity: 'mobileGetConnectivity',
    setConnectivity: 'mobileSetConnectivity',
    toggleGps: 'toggleLocationServices',
    isGpsEnables: 'isLocationServicesEnabled',
    hideKeyboard: 'hideKeyboard',
    isKeyboardShown: 'isKeyboardShown',
    pressKey: 'mobilePressKey',
    getDisplayDensity: 'getDisplayDensity',
    getSystemBars: 'getSystemBars',
    fingerprint: 'mobileFingerprint',
    sendSms: 'mobileSendSms',
    gsmCall: 'mobileGsmCall',
    gsmSignal: 'mobileGsmSignal',
    gsmVoice: 'mobileGsmVoice',
    powerAc: 'mobilePowerAC',
    powerCapacity: 'mobilePowerCapacity',
    networkSpeed: 'mobileNetworkSpeed',
    sensorSet: 'sensorSet',
    getPerformanceData: 'mobileGetPerformanceData',
    getPerformanceDataTypes: 'getPerformanceDataTypes',
    statusBar: 'mobilePerformStatusBarCommand',
    screenshots: 'mobileScreenshots'
  };
  if (!_lodash.default.has(mobileCommandsMapping, mobileCommand)) {
    throw new _driver.errors.UnknownCommandError(`Unknown mobile command "${mobileCommand}". ` + `Only ${_lodash.default.keys(mobileCommandsMapping)} commands are supported.`);
  }
  return await this[mobileCommandsMapping[mobileCommand]](opts);
};
commands.mobileViewportScreenshot = async function () {
  return await this.getViewportScreenshot();
};
commands.mobileViewPortRect = async function mobileViewPortRect() {
  return await this.getViewPortRect();
};
commands.setUrl = async function (url) {
  await this.adb.startUri(url, this.opts.appPackage);
};
commands.mobileDeepLink = async function (opts = {}) {
  const {
    url,
    package: pkg,
    waitForLaunch
  } = opts;
  return await this.adb.startUri(url, pkg, {
    waitForLaunch
  });
};
commands.openNotifications = async function () {
  return await this.uiautomator2.jwproxy.command('/appium/device/open_notifications', 'POST', {});
};
commands.updateSettings = async function (settings) {
  await this.settings.update(settings);
  await this.uiautomator2.jwproxy.command('/appium/settings', 'POST', {
    settings
  });
};
commands.getSettings = async function () {
  const driverSettings = this.settings.getSettings();
  const serverSettings = await this.uiautomator2.jwproxy.command('/appium/settings', 'GET');
  return {
    ...driverSettings,
    ...serverSettings
  };
};
helpers.wrapBootstrapDisconnect = async function (wrapped) {
  await wrapped();
};
helpers.suspendChromedriverProxy = function () {
  this.chromedriver = null;
  this.proxyReqRes = this.uiautomator2.proxyReqRes.bind(this.uiautomator2);
  this.proxyCommand = this.uiautomator2.proxyCommand.bind(this.uiautomator2);
  this.jwpProxyActive = true;
};
commands.mobileGetDeviceInfo = async function () {
  return await this.uiautomator2.jwproxy.command('/appium/device/info', 'GET');
};
commands.mobileType = async function mobileType(opts = {}) {
  const {
    text
  } = opts;
  if (_lodash.default.isUndefined(text)) {
    this.log.errorAndThrow(`The 'text' argument is mandatory`);
  }
  return await this.adb.typeUnicode(text);
};
commands.mobileInstallMultipleApks = async function (opts = {}) {
  if (!_lodash.default.isArray(opts.apks) || _lodash.default.isEmpty(opts.apks)) {
    throw new _driver.errors.InvalidArgumentError('No apks are given to install');
  }
  const apks = await _bluebird.default.all(opts.apks.map(app => this.helpers.configureApp(app, [_extensions.APK_EXTENSION])));
  await this.adb.installMultipleApks(apks, opts.options);
};
commands.mobileBackgroundApp = async function mobileBackgroundApp(opts = {}) {
  const {
    seconds = -1
  } = opts;
  return await this.background(seconds);
};
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,