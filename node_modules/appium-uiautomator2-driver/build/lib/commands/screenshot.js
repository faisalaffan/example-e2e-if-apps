"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
const commands = {};
const DISPLAY_PATTERN = /^Display\s+(\d+)\s+\(.+display\s+(\d+)\).+displayName="([^"]*)/gm;
commands.getScreenshot = async function () {
  if (this.mjpegStream) {
    const data = await this.mjpegStream.lastChunkPNGBase64();
    if (data) {
      return data;
    }
    this.log.warn('Tried to get screenshot from active MJPEG stream, but there ' + 'was no data yet. Falling back to regular screenshot methods.');
  }
  return await this.uiautomator2.jwproxy.command('/screenshot', 'GET');
};
commands.mobileScreenshots = async function mobileScreenshots(opts = {}) {
  const displaysInfo = await this.adb.shell(['dumpsys', 'SurfaceFlinger', '--display-id']);
  const infos = {};
  let match;
  while (match = DISPLAY_PATTERN.exec(displaysInfo)) {
    infos[match[1]] = {
      id: match[1],
      isDefault: match[2] === '0',
      name: match[3]
    };
  }
  if (_lodash.default.isEmpty(infos)) {
    this.log.debug(displaysInfo);
    throw new Error('Cannot determine the information about connected Android displays');
  }
  this.log.info(`Parsed Android display infos: ${JSON.stringify(infos)}`);
  const toB64Screenshot = async dispId => (await this.adb.takeScreenshot(dispId)).toString('base64');
  const {
    displayId
  } = opts;
  const displayIdStr = isNaN(displayId) ? null : `${displayId}`;
  if (displayIdStr) {
    if (!infos[displayIdStr]) {
      throw new Error(`The provided display identifier '${displayId}' is not known. ` + `Only the following displays have been detected: ${JSON.stringify(infos)}`);
    }
    return {
      [displayIdStr]: {
        ...infos[displayIdStr],
        payload: await toB64Screenshot(displayIdStr)
      }
    };
  }
  const allInfos = _lodash.default.values(infos);
  const screenshots = await _bluebird.default.all(allInfos.map(({
    id
  }) => toB64Screenshot(id)));
  for (const [info, payload] of _lodash.default.zip(allInfos, screenshots)) {
    info.payload = payload;
  }
  return infos;
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYmx1ZWJpcmQiLCJjb21tYW5kcyIsIkRJU1BMQVlfUEFUVEVSTiIsImdldFNjcmVlbnNob3QiLCJtanBlZ1N0cmVhbSIsImRhdGEiLCJsYXN0Q2h1bmtQTkdCYXNlNjQiLCJsb2ciLCJ3YXJuIiwidWlhdXRvbWF0b3IyIiwiandwcm94eSIsImNvbW1hbmQiLCJtb2JpbGVTY3JlZW5zaG90cyIsIm9wdHMiLCJkaXNwbGF5c0luZm8iLCJhZGIiLCJzaGVsbCIsImluZm9zIiwibWF0Y2giLCJleGVjIiwiaWQiLCJpc0RlZmF1bHQiLCJuYW1lIiwiXyIsImlzRW1wdHkiLCJkZWJ1ZyIsIkVycm9yIiwiaW5mbyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b0I2NFNjcmVlbnNob3QiLCJkaXNwSWQiLCJ0YWtlU2NyZWVuc2hvdCIsInRvU3RyaW5nIiwiZGlzcGxheUlkIiwiZGlzcGxheUlkU3RyIiwiaXNOYU4iLCJwYXlsb2FkIiwiYWxsSW5mb3MiLCJ2YWx1ZXMiLCJzY3JlZW5zaG90cyIsIkIiLCJhbGwiLCJtYXAiLCJ6aXAiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbW1hbmRzL3NjcmVlbnNob3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcblxuY29uc3QgY29tbWFuZHMgPSB7fTtcblxuLy8gRGlzcGxheSA0NjE5ODI3MjU5ODM1NjQ0NjcyIChIV0MgZGlzcGxheSAwKTogcG9ydD0wIHBucElkPUdHTCBkaXNwbGF5TmFtZT1cIkVNVV9kaXNwbGF5XzBcIlxuY29uc3QgRElTUExBWV9QQVRURVJOID0gL15EaXNwbGF5XFxzKyhcXGQrKVxccytcXCguK2Rpc3BsYXlcXHMrKFxcZCspXFwpLitkaXNwbGF5TmFtZT1cIihbXlwiXSopL2dtO1xuXG5jb21tYW5kcy5nZXRTY3JlZW5zaG90ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5tanBlZ1N0cmVhbSkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLm1qcGVnU3RyZWFtLmxhc3RDaHVua1BOR0Jhc2U2NCgpO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgdGhpcy5sb2cud2FybignVHJpZWQgdG8gZ2V0IHNjcmVlbnNob3QgZnJvbSBhY3RpdmUgTUpQRUcgc3RyZWFtLCBidXQgdGhlcmUgJyArXG4gICAgICAnd2FzIG5vIGRhdGEgeWV0LiBGYWxsaW5nIGJhY2sgdG8gcmVndWxhciBzY3JlZW5zaG90IG1ldGhvZHMuJyk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXMudWlhdXRvbWF0b3IyLmp3cHJveHkuY29tbWFuZCgnL3NjcmVlbnNob3QnLCAnR0VUJyk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNjcmVlbnNob3RzSW5mb1xuICpcbiAqIEEgZGljdGlvbmFyeSB3aGVyZSBlYWNoIGtleSBjb250YWlucyBhIHVuaXF1ZSBkaXNwbGF5IGlkZW50aWZpZXJcbiAqIGFuZCB2YWx1ZXMgYXJlIGRpY3Rpb25hcmllcyB3aXRoIGZvbGxvd2luZyBpdGVtczpcbiAqIC0gaWQ6IERpc3BsYXkgaWRlbnRpZmllclxuICogLSBuYW1lOiBEaXNwbGF5IG5hbWUsIGNvdWxkIGJlIGVtcHR5XG4gKiAtIGlzRGVmYXVsdDogV2hldGhlciB0aGlzIGRpc3BsYXkgaXMgdGhlIGRlZmF1bHQgb25lXG4gKiAtIHBheWxvYWQ6IFRoZSBhY3R1YWwgUE5HIHNjcmVlbnNob3QgZGF0YSBlbmNvZGVkIHRvIGJhc2U2NCBzdHJpbmdcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNjcmVlbnNob3RzT3B0c1xuICogQHByb3BlcnR5IHtudW1iZXJ8c3RyaW5nP30gZGlzcGxheUlkIEFuZHJvaWQgZGlzcGxheSBpZGVudGlmaWVyIHRvIHRha2UgYSBzY3JlZW5zaG90IGZvci5cbiAqIElmIG5vdCBwcm92aWRlZCB0aGVuIHNjcmVlbnNob3RzIG9mIGFsbCBkaXNwbGF5cyBhcmUgZ29pbmcgdG8gYmUgcmV0dXJuZWQuXG4gKiBJZiBubyBtYXRjaGVzIHdlcmUgZm91bmQgdGhlbiBhbiBlcnJvciBpcyB0aHJvd24uXG4gKi9cblxuLyoqXG4gKiBSZXRyaWV2ZXMgc2NyZWVuc2hvdHMgb2YgZWFjaCBkaXNwbGF5IGF2YWlsYWJsZSB0byBBbmRyb2lkLlxuICogVGhpcyBmdW5jdGlvbmFsaXR5IGlzIG9ubHkgc3VwcG9ydGVkIHNpbmNlIEFuZHJvaWQgMTAuXG4gKlxuICogQHBhcmFtIHtTY3JlZW5zaG90c09wdHN9IG9wdHNcbiAqIEByZXR1cm5zIHtQcm9taXNlPFNjcmVlbnNob3RzSW5mbz59XG4gKi9cbmNvbW1hbmRzLm1vYmlsZVNjcmVlbnNob3RzID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlU2NyZWVuc2hvdHMgKG9wdHMgPSB7fSkge1xuICBjb25zdCBkaXNwbGF5c0luZm8gPSBhd2FpdCB0aGlzLmFkYi5zaGVsbChbJ2R1bXBzeXMnLCAnU3VyZmFjZUZsaW5nZXInLCAnLS1kaXNwbGF5LWlkJ10pO1xuICBjb25zdCBpbmZvcyA9IHt9O1xuICBsZXQgbWF0Y2g7XG4gIHdoaWxlICgobWF0Y2ggPSBESVNQTEFZX1BBVFRFUk4uZXhlYyhkaXNwbGF5c0luZm8pKSkge1xuICAgIGluZm9zW21hdGNoWzFdXSA9IHtcbiAgICAgIGlkOiBtYXRjaFsxXSxcbiAgICAgIGlzRGVmYXVsdDogbWF0Y2hbMl0gPT09ICcwJyxcbiAgICAgIG5hbWU6IG1hdGNoWzNdLFxuICAgIH07XG4gIH1cbiAgaWYgKF8uaXNFbXB0eShpbmZvcykpIHtcbiAgICB0aGlzLmxvZy5kZWJ1ZyhkaXNwbGF5c0luZm8pO1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGRldGVybWluZSB0aGUgaW5mb3JtYXRpb24gYWJvdXQgY29ubmVjdGVkIEFuZHJvaWQgZGlzcGxheXMnKTtcbiAgfVxuICB0aGlzLmxvZy5pbmZvKGBQYXJzZWQgQW5kcm9pZCBkaXNwbGF5IGluZm9zOiAke0pTT04uc3RyaW5naWZ5KGluZm9zKX1gKTtcblxuICBjb25zdCB0b0I2NFNjcmVlbnNob3QgPSBhc3luYyAoZGlzcElkKSA9PiAoYXdhaXQgdGhpcy5hZGIudGFrZVNjcmVlbnNob3QoZGlzcElkKSlcbiAgICAudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXG4gIGNvbnN0IHtkaXNwbGF5SWR9ID0gb3B0cztcbiAgY29uc3QgZGlzcGxheUlkU3RyID0gaXNOYU4oZGlzcGxheUlkKSA/IG51bGwgOiBgJHtkaXNwbGF5SWR9YDtcbiAgaWYgKGRpc3BsYXlJZFN0cikge1xuICAgIGlmICghaW5mb3NbZGlzcGxheUlkU3RyXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGhlIHByb3ZpZGVkIGRpc3BsYXkgaWRlbnRpZmllciAnJHtkaXNwbGF5SWR9JyBpcyBub3Qga25vd24uIGAgK1xuICAgICAgICBgT25seSB0aGUgZm9sbG93aW5nIGRpc3BsYXlzIGhhdmUgYmVlbiBkZXRlY3RlZDogJHtKU09OLnN0cmluZ2lmeShpbmZvcyl9YFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIFtkaXNwbGF5SWRTdHJdOiB7XG4gICAgICAgIC4uLmluZm9zW2Rpc3BsYXlJZFN0cl0sXG4gICAgICAgIHBheWxvYWQ6IGF3YWl0IHRvQjY0U2NyZWVuc2hvdChkaXNwbGF5SWRTdHIpLFxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBjb25zdCBhbGxJbmZvcyA9IF8udmFsdWVzKGluZm9zKTtcbiAgY29uc3Qgc2NyZWVuc2hvdHMgPSBhd2FpdCBCLmFsbChhbGxJbmZvcy5tYXAoKHtpZH0pID0+IHRvQjY0U2NyZWVuc2hvdChpZCkpKTtcbiAgZm9yIChjb25zdCBbaW5mbywgcGF5bG9hZF0gb2YgXy56aXAoYWxsSW5mb3MsIHNjcmVlbnNob3RzKSkge1xuICAgIGluZm8ucGF5bG9hZCA9IHBheWxvYWQ7XG4gIH1cbiAgcmV0dXJuIGluZm9zO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsU0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsTUFBTUUsUUFBUSxHQUFHLENBQUMsQ0FBQztBQUduQixNQUFNQyxlQUFlLEdBQUcsa0VBQWtFO0FBRTFGRCxRQUFRLENBQUNFLGFBQWEsR0FBRyxrQkFBa0I7RUFDekMsSUFBSSxJQUFJLENBQUNDLFdBQVcsRUFBRTtJQUNwQixNQUFNQyxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUNELFdBQVcsQ0FBQ0Usa0JBQWtCLENBQUMsQ0FBQztJQUN4RCxJQUFJRCxJQUFJLEVBQUU7TUFDUixPQUFPQSxJQUFJO0lBQ2I7SUFDQSxJQUFJLENBQUNFLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDLDhEQUE4RCxHQUMxRSw4REFBOEQsQ0FBQztFQUNuRTtFQUNBLE9BQU8sTUFBTSxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQztBQUN0RSxDQUFDO0FBMkJEVixRQUFRLENBQUNXLGlCQUFpQixHQUFHLGVBQWVBLGlCQUFpQkEsQ0FBRUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFO0VBQ3hFLE1BQU1DLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQ0MsR0FBRyxDQUFDQyxLQUFLLENBQUMsQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUM7RUFDeEYsTUFBTUMsS0FBSyxHQUFHLENBQUMsQ0FBQztFQUNoQixJQUFJQyxLQUFLO0VBQ1QsT0FBUUEsS0FBSyxHQUFHaEIsZUFBZSxDQUFDaUIsSUFBSSxDQUFDTCxZQUFZLENBQUMsRUFBRztJQUNuREcsS0FBSyxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRztNQUNoQkUsRUFBRSxFQUFFRixLQUFLLENBQUMsQ0FBQyxDQUFDO01BQ1pHLFNBQVMsRUFBRUgsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUc7TUFDM0JJLElBQUksRUFBRUosS0FBSyxDQUFDLENBQUM7SUFDZixDQUFDO0VBQ0g7RUFDQSxJQUFJSyxlQUFDLENBQUNDLE9BQU8sQ0FBQ1AsS0FBSyxDQUFDLEVBQUU7SUFDcEIsSUFBSSxDQUFDVixHQUFHLENBQUNrQixLQUFLLENBQUNYLFlBQVksQ0FBQztJQUM1QixNQUFNLElBQUlZLEtBQUssQ0FBQyxtRUFBbUUsQ0FBQztFQUN0RjtFQUNBLElBQUksQ0FBQ25CLEdBQUcsQ0FBQ29CLElBQUksQ0FBRSxpQ0FBZ0NDLElBQUksQ0FBQ0MsU0FBUyxDQUFDWixLQUFLLENBQUUsRUFBQyxDQUFDO0VBRXZFLE1BQU1hLGVBQWUsR0FBRyxNQUFPQyxNQUFNLElBQUssQ0FBQyxNQUFNLElBQUksQ0FBQ2hCLEdBQUcsQ0FBQ2lCLGNBQWMsQ0FBQ0QsTUFBTSxDQUFDLEVBQzdFRSxRQUFRLENBQUMsUUFBUSxDQUFDO0VBRXJCLE1BQU07SUFBQ0M7RUFBUyxDQUFDLEdBQUdyQixJQUFJO0VBQ3hCLE1BQU1zQixZQUFZLEdBQUdDLEtBQUssQ0FBQ0YsU0FBUyxDQUFDLEdBQUcsSUFBSSxHQUFJLEdBQUVBLFNBQVUsRUFBQztFQUM3RCxJQUFJQyxZQUFZLEVBQUU7SUFDaEIsSUFBSSxDQUFDbEIsS0FBSyxDQUFDa0IsWUFBWSxDQUFDLEVBQUU7TUFDeEIsTUFBTSxJQUFJVCxLQUFLLENBQ1osb0NBQW1DUSxTQUFVLGtCQUFpQixHQUM5RCxtREFBa0ROLElBQUksQ0FBQ0MsU0FBUyxDQUFDWixLQUFLLENBQUUsRUFDM0UsQ0FBQztJQUNIO0lBQ0EsT0FBTztNQUNMLENBQUNrQixZQUFZLEdBQUc7UUFDZCxHQUFHbEIsS0FBSyxDQUFDa0IsWUFBWSxDQUFDO1FBQ3RCRSxPQUFPLEVBQUUsTUFBTVAsZUFBZSxDQUFDSyxZQUFZO01BQzdDO0lBQ0YsQ0FBQztFQUNIO0VBRUEsTUFBTUcsUUFBUSxHQUFHZixlQUFDLENBQUNnQixNQUFNLENBQUN0QixLQUFLLENBQUM7RUFDaEMsTUFBTXVCLFdBQVcsR0FBRyxNQUFNQyxpQkFBQyxDQUFDQyxHQUFHLENBQUNKLFFBQVEsQ0FBQ0ssR0FBRyxDQUFDLENBQUM7SUFBQ3ZCO0VBQUUsQ0FBQyxLQUFLVSxlQUFlLENBQUNWLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDNUUsS0FBSyxNQUFNLENBQUNPLElBQUksRUFBRVUsT0FBTyxDQUFDLElBQUlkLGVBQUMsQ0FBQ3FCLEdBQUcsQ0FBQ04sUUFBUSxFQUFFRSxXQUFXLENBQUMsRUFBRTtJQUMxRGIsSUFBSSxDQUFDVSxPQUFPLEdBQUdBLE9BQU87RUFDeEI7RUFDQSxPQUFPcEIsS0FBSztBQUNkLENBQUM7QUFBQyxJQUFBNEIsUUFBQSxHQUVhNUMsUUFBUTtBQUFBNkMsT0FBQSxDQUFBQyxPQUFBLEdBQUFGLFFBQUEifQ==