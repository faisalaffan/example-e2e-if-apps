"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
const commands = {};
commands.doPerformMultiAction = async function (elementId, states) {
  let opts;
  if (elementId) {
    opts = {
      elementId,
      actions: states
    };
    return await this.uiautomator2.jwproxy.command('/touch/multi/perform', 'POST', opts);
  } else {
    opts = {
      actions: states
    };
    return await this.uiautomator2.jwproxy.command('/touch/multi/perform', 'POST', opts);
  }
};
commands.performActions = async function (actions) {
  this.log.debug(`Received the following W3C actions: ${JSON.stringify(actions, null, '  ')}`);
  const preprocessedActions = actions.map(action => Object.assign({}, action, action.type === 'pointer' ? {
    parameters: {
      pointerType: 'touch'
    }
  } : {}));
  this.log.debug(`Preprocessed actions: ${JSON.stringify(preprocessedActions, null, '  ')}`);
  return await this.uiautomator2.jwproxy.command('/actions', 'POST', {
    actions: preprocessedActions
  });
};
commands.releaseActions = async function releaseActions() {
  this.log.info('On this platform, releaseActions is a no-op');
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsImRvUGVyZm9ybU11bHRpQWN0aW9uIiwiZWxlbWVudElkIiwic3RhdGVzIiwib3B0cyIsImFjdGlvbnMiLCJ1aWF1dG9tYXRvcjIiLCJqd3Byb3h5IiwiY29tbWFuZCIsInBlcmZvcm1BY3Rpb25zIiwibG9nIiwiZGVidWciLCJKU09OIiwic3RyaW5naWZ5IiwicHJlcHJvY2Vzc2VkQWN0aW9ucyIsIm1hcCIsImFjdGlvbiIsIk9iamVjdCIsImFzc2lnbiIsInR5cGUiLCJwYXJhbWV0ZXJzIiwicG9pbnRlclR5cGUiLCJyZWxlYXNlQWN0aW9ucyIsImluZm8iLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbW1hbmRzL3RvdWNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbW1hbmRzID0ge307XG5cbmNvbW1hbmRzLmRvUGVyZm9ybU11bHRpQWN0aW9uID0gYXN5bmMgZnVuY3Rpb24gKGVsZW1lbnRJZCwgc3RhdGVzKSB7XG4gIGxldCBvcHRzO1xuICBpZiAoZWxlbWVudElkKSB7XG4gICAgb3B0cyA9IHtcbiAgICAgIGVsZW1lbnRJZCxcbiAgICAgIGFjdGlvbnM6IHN0YXRlc1xuICAgIH07XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKCcvdG91Y2gvbXVsdGkvcGVyZm9ybScsICdQT1NUJywgb3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgb3B0cyA9IHtcbiAgICAgIGFjdGlvbnM6IHN0YXRlc1xuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudWlhdXRvbWF0b3IyLmp3cHJveHkuY29tbWFuZCgnL3RvdWNoL211bHRpL3BlcmZvcm0nLCAnUE9TVCcsIG9wdHMpO1xuICB9XG59O1xuXG5jb21tYW5kcy5wZXJmb3JtQWN0aW9ucyA9IGFzeW5jIGZ1bmN0aW9uIChhY3Rpb25zKSB7XG4gIHRoaXMubG9nLmRlYnVnKGBSZWNlaXZlZCB0aGUgZm9sbG93aW5nIFczQyBhY3Rpb25zOiAke0pTT04uc3RyaW5naWZ5KGFjdGlvbnMsIG51bGwsICcgICcpfWApO1xuICAvLyBUaGlzIGlzIG1hbmRhdG9yeSwgc2luY2UgU2VsZW5pdW0gQVBJIHVzZXMgTU9VU0UgYXMgdGhlIGRlZmF1bHQgcG9pbnRlciB0eXBlXG4gIGNvbnN0IHByZXByb2Nlc3NlZEFjdGlvbnMgPSBhY3Rpb25zXG4gICAgLm1hcCgoYWN0aW9uKSA9PiBPYmplY3QuYXNzaWduKHt9LCBhY3Rpb24sIGFjdGlvbi50eXBlID09PSAncG9pbnRlcicgPyB7XG4gICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIHBvaW50ZXJUeXBlOiAndG91Y2gnXG4gICAgICB9XG4gICAgfSA6IHt9KSk7XG4gIHRoaXMubG9nLmRlYnVnKGBQcmVwcm9jZXNzZWQgYWN0aW9uczogJHtKU09OLnN0cmluZ2lmeShwcmVwcm9jZXNzZWRBY3Rpb25zLCBudWxsLCAnICAnKX1gKTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMudWlhdXRvbWF0b3IyLmp3cHJveHkuY29tbWFuZCgnL2FjdGlvbnMnLCAnUE9TVCcsIHthY3Rpb25zOiBwcmVwcm9jZXNzZWRBY3Rpb25zfSk7XG59O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1hd2FpdFxuY29tbWFuZHMucmVsZWFzZUFjdGlvbnMgPSBhc3luYyBmdW5jdGlvbiByZWxlYXNlQWN0aW9ucyAoKSB7XG4gIHRoaXMubG9nLmluZm8oJ09uIHRoaXMgcGxhdGZvcm0sIHJlbGVhc2VBY3Rpb25zIGlzIGEgbm8tb3AnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTUEsUUFBUSxHQUFHLENBQUMsQ0FBQztBQUVuQkEsUUFBUSxDQUFDQyxvQkFBb0IsR0FBRyxnQkFBZ0JDLFNBQVMsRUFBRUMsTUFBTSxFQUFFO0VBQ2pFLElBQUlDLElBQUk7RUFDUixJQUFJRixTQUFTLEVBQUU7SUFDYkUsSUFBSSxHQUFHO01BQ0xGLFNBQVM7TUFDVEcsT0FBTyxFQUFFRjtJQUNYLENBQUM7SUFFRCxPQUFPLE1BQU0sSUFBSSxDQUFDRyxZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLHNCQUFzQixFQUFFLE1BQU0sRUFBRUosSUFBSSxDQUFDO0VBQ3RGLENBQUMsTUFBTTtJQUNMQSxJQUFJLEdBQUc7TUFDTEMsT0FBTyxFQUFFRjtJQUNYLENBQUM7SUFDRCxPQUFPLE1BQU0sSUFBSSxDQUFDRyxZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLHNCQUFzQixFQUFFLE1BQU0sRUFBRUosSUFBSSxDQUFDO0VBQ3RGO0FBQ0YsQ0FBQztBQUVESixRQUFRLENBQUNTLGNBQWMsR0FBRyxnQkFBZ0JKLE9BQU8sRUFBRTtFQUNqRCxJQUFJLENBQUNLLEdBQUcsQ0FBQ0MsS0FBSyxDQUFFLHVDQUFzQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUNSLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFFLEVBQUMsQ0FBQztFQUU1RixNQUFNUyxtQkFBbUIsR0FBR1QsT0FBTyxDQUNoQ1UsR0FBRyxDQUFFQyxNQUFNLElBQUtDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFRixNQUFNLEVBQUVBLE1BQU0sQ0FBQ0csSUFBSSxLQUFLLFNBQVMsR0FBRztJQUNyRUMsVUFBVSxFQUFFO01BQ1ZDLFdBQVcsRUFBRTtJQUNmO0VBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDVixJQUFJLENBQUNYLEdBQUcsQ0FBQ0MsS0FBSyxDQUFFLHlCQUF3QkMsSUFBSSxDQUFDQyxTQUFTLENBQUNDLG1CQUFtQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUUsRUFBQyxDQUFDO0VBQzFGLE9BQU8sTUFBTSxJQUFJLENBQUNSLFlBQVksQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRTtJQUFDSCxPQUFPLEVBQUVTO0VBQW1CLENBQUMsQ0FBQztBQUNwRyxDQUFDO0FBR0RkLFFBQVEsQ0FBQ3NCLGNBQWMsR0FBRyxlQUFlQSxjQUFjQSxDQUFBLEVBQUk7RUFDekQsSUFBSSxDQUFDWixHQUFHLENBQUNhLElBQUksQ0FBQyw2Q0FBNkMsQ0FBQztBQUM5RCxDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUVheEIsUUFBUTtBQUFBeUIsT0FBQSxDQUFBQyxPQUFBLEdBQUFGLFFBQUEifQ==