{"version":3,"file":"screenshot.js","names":["_lodash","_interopRequireDefault","require","_bluebird","commands","DISPLAY_PATTERN","getScreenshot","mjpegStream","data","lastChunkPNGBase64","log","warn","uiautomator2","jwproxy","command","mobileScreenshots","opts","displaysInfo","adb","shell","infos","match","exec","id","isDefault","name","_","isEmpty","debug","Error","info","JSON","stringify","toB64Screenshot","dispId","takeScreenshot","toString","displayId","displayIdStr","isNaN","payload","allInfos","values","screenshots","B","all","map","zip","_default","exports","default"],"sources":["../../../lib/commands/screenshot.js"],"sourcesContent":["import _ from 'lodash';\nimport B from 'bluebird';\n\nconst commands = {};\n\n// Display 4619827259835644672 (HWC display 0): port=0 pnpId=GGL displayName=\"EMU_display_0\"\nconst DISPLAY_PATTERN = /^Display\\s+(\\d+)\\s+\\(.+display\\s+(\\d+)\\).+displayName=\"([^\"]*)/gm;\n\ncommands.getScreenshot = async function () {\n  if (this.mjpegStream) {\n    const data = await this.mjpegStream.lastChunkPNGBase64();\n    if (data) {\n      return data;\n    }\n    this.log.warn('Tried to get screenshot from active MJPEG stream, but there ' +\n      'was no data yet. Falling back to regular screenshot methods.');\n  }\n  return await this.uiautomator2.jwproxy.command('/screenshot', 'GET');\n};\n\n/**\n * @typedef {Object} ScreenshotsInfo\n *\n * A dictionary where each key contains a unique display identifier\n * and values are dictionaries with following items:\n * - id: Display identifier\n * - name: Display name, could be empty\n * - isDefault: Whether this display is the default one\n * - payload: The actual PNG screenshot data encoded to base64 string\n */\n\n/**\n * @typedef {Object} ScreenshotsOpts\n * @property {number|string?} displayId Android display identifier to take a screenshot for.\n * If not provided then screenshots of all displays are going to be returned.\n * If no matches were found then an error is thrown.\n */\n\n/**\n * Retrieves screenshots of each display available to Android.\n * This functionality is only supported since Android 10.\n *\n * @param {ScreenshotsOpts} opts\n * @returns {Promise<ScreenshotsInfo>}\n */\ncommands.mobileScreenshots = async function mobileScreenshots (opts = {}) {\n  const displaysInfo = await this.adb.shell(['dumpsys', 'SurfaceFlinger', '--display-id']);\n  const infos = {};\n  let match;\n  while ((match = DISPLAY_PATTERN.exec(displaysInfo))) {\n    infos[match[1]] = {\n      id: match[1],\n      isDefault: match[2] === '0',\n      name: match[3],\n    };\n  }\n  if (_.isEmpty(infos)) {\n    this.log.debug(displaysInfo);\n    throw new Error('Cannot determine the information about connected Android displays');\n  }\n  this.log.info(`Parsed Android display infos: ${JSON.stringify(infos)}`);\n\n  const toB64Screenshot = async (dispId) => (await this.adb.takeScreenshot(dispId))\n    .toString('base64');\n\n  const {displayId} = opts;\n  const displayIdStr = isNaN(displayId) ? null : `${displayId}`;\n  if (displayIdStr) {\n    if (!infos[displayIdStr]) {\n      throw new Error(\n        `The provided display identifier '${displayId}' is not known. ` +\n        `Only the following displays have been detected: ${JSON.stringify(infos)}`\n      );\n    }\n    return {\n      [displayIdStr]: {\n        ...infos[displayIdStr],\n        payload: await toB64Screenshot(displayIdStr),\n      }\n    };\n  }\n\n  const allInfos = _.values(infos);\n  const screenshots = await B.all(allInfos.map(({id}) => toB64Screenshot(id)));\n  for (const [info, payload] of _.zip(allInfos, screenshots)) {\n    info.payload = payload;\n  }\n  return infos;\n};\n\nexport default commands;\n"],"mappings":";;;;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,SAAA,GAAAF,sBAAA,CAAAC,OAAA;AAEA,MAAME,QAAQ,GAAG,CAAC,CAAC;AAGnB,MAAMC,eAAe,GAAG,kEAAkE;AAE1FD,QAAQ,CAACE,aAAa,GAAG,kBAAkB;EACzC,IAAI,IAAI,CAACC,WAAW,EAAE;IACpB,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACD,WAAW,CAACE,kBAAkB,CAAC,CAAC;IACxD,IAAID,IAAI,EAAE;MACR,OAAOA,IAAI;IACb;IACA,IAAI,CAACE,GAAG,CAACC,IAAI,CAAC,8DAA8D,GAC1E,8DAA8D,CAAC;EACnE;EACA,OAAO,MAAM,IAAI,CAACC,YAAY,CAACC,OAAO,CAACC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC;AACtE,CAAC;AA2BDV,QAAQ,CAACW,iBAAiB,GAAG,eAAeA,iBAAiBA,CAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EACxE,MAAMC,YAAY,GAAG,MAAM,IAAI,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC,SAAS,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;EACxF,MAAMC,KAAK,GAAG,CAAC,CAAC;EAChB,IAAIC,KAAK;EACT,OAAQA,KAAK,GAAGhB,eAAe,CAACiB,IAAI,CAACL,YAAY,CAAC,EAAG;IACnDG,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG;MAChBE,EAAE,EAAEF,KAAK,CAAC,CAAC,CAAC;MACZG,SAAS,EAAEH,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG;MAC3BI,IAAI,EAAEJ,KAAK,CAAC,CAAC;IACf,CAAC;EACH;EACA,IAAIK,eAAC,CAACC,OAAO,CAACP,KAAK,CAAC,EAAE;IACpB,IAAI,CAACV,GAAG,CAACkB,KAAK,CAACX,YAAY,CAAC;IAC5B,MAAM,IAAIY,KAAK,CAAC,mEAAmE,CAAC;EACtF;EACA,IAAI,CAACnB,GAAG,CAACoB,IAAI,CAAE,iCAAgCC,IAAI,CAACC,SAAS,CAACZ,KAAK,CAAE,EAAC,CAAC;EAEvE,MAAMa,eAAe,GAAG,MAAOC,MAAM,IAAK,CAAC,MAAM,IAAI,CAAChB,GAAG,CAACiB,cAAc,CAACD,MAAM,CAAC,EAC7EE,QAAQ,CAAC,QAAQ,CAAC;EAErB,MAAM;IAACC;EAAS,CAAC,GAAGrB,IAAI;EACxB,MAAMsB,YAAY,GAAGC,KAAK,CAACF,SAAS,CAAC,GAAG,IAAI,GAAI,GAAEA,SAAU,EAAC;EAC7D,IAAIC,YAAY,EAAE;IAChB,IAAI,CAAClB,KAAK,CAACkB,YAAY,CAAC,EAAE;MACxB,MAAM,IAAIT,KAAK,CACZ,oCAAmCQ,SAAU,kBAAiB,GAC9D,mDAAkDN,IAAI,CAACC,SAAS,CAACZ,KAAK,CAAE,EAC3E,CAAC;IACH;IACA,OAAO;MACL,CAACkB,YAAY,GAAG;QACd,GAAGlB,KAAK,CAACkB,YAAY,CAAC;QACtBE,OAAO,EAAE,MAAMP,eAAe,CAACK,YAAY;MAC7C;IACF,CAAC;EACH;EAEA,MAAMG,QAAQ,GAAGf,eAAC,CAACgB,MAAM,CAACtB,KAAK,CAAC;EAChC,MAAMuB,WAAW,GAAG,MAAMC,iBAAC,CAACC,GAAG,CAACJ,QAAQ,CAACK,GAAG,CAAC,CAAC;IAACvB;EAAE,CAAC,KAAKU,eAAe,CAACV,EAAE,CAAC,CAAC,CAAC;EAC5E,KAAK,MAAM,CAACO,IAAI,EAAEU,OAAO,CAAC,IAAId,eAAC,CAACqB,GAAG,CAACN,QAAQ,EAAEE,WAAW,CAAC,EAAE;IAC1Db,IAAI,CAACU,OAAO,GAAGA,OAAO;EACxB;EACA,OAAOpB,KAAK;AACd,CAAC;AAAC,IAAA4B,QAAA,GAEa5C,QAAQ;AAAA6C,OAAA,CAAAC,OAAA,GAAAF,QAAA"}