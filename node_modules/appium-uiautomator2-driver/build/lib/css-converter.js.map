{"version":3,"file":"css-converter.js","names":["_cssSelectorParser","require","_lodash","_interopRequireDefault","_driver","_logger","parseCssSelector","createParser","syntax","pseudoClasses","unknown","definitions","Selector","combinators","attributes","operators","ids","classNames","tag","wildcard","substitutes","RESOURCE_ID","ID_LOCATOR_PATTERN","BOOLEAN_ATTRS","NUMERIC_ATTRS","STR_ATTRS","ALL_ATTRS","ATTRIBUTE_ALIASES","toSnakeCase","str","tokens","split","map","charAt","toUpperCase","slice","toLowerCase","out","join","requireBoolean","css","_ref","val","_","toLower","value","argument","includes","Error","name","requireEntityName","cssEntity","attrName","officialAttr","aliasAttrs","getWordMatcherRegex","word","escapeRegExp","CssConverter","constructor","selector","pkg","formatIdLocator","locator","test","parseAttr","cssAttr","_cssAttr$value","attrValue","isString","isEmpty","methodName","operator","parsePseudo","cssPseudo","_cssPseudo$argument","argValue","pseudoName","parseCssRule","cssRule","_cssRule$tag","combinator","uiAutomatorSelector","tagName","androidClass","cssClassNames","push","attr","pseudo","sel","nestedRule","parseCssObject","rules","toUiAutomatorSelector","cssObj","e","log","debug","stack","errors","InvalidSelectorError","message","_default","exports","default"],"sources":["../../lib/css-converter.js"],"sourcesContent":["import { createParser } from 'css-selector-parser';\nimport _ from 'lodash';\nimport { errors } from 'appium/driver';\nimport log from './logger';\n\nconst parseCssSelector = createParser({\n  syntax: {\n    pseudoClasses: {\n      unknown: 'accept',\n      definitions: {\n        Selector: ['has'],\n      }\n    },\n    combinators: ['>', '+', '~'],\n    attributes: {\n      operators: ['^=', '$=', '*=', '~=', '=']\n    },\n    ids: true,\n    classNames: true,\n    tag: {\n      wildcard: true\n    },\n  },\n  substitutes: true\n});\n\nconst RESOURCE_ID = 'resource-id';\nconst ID_LOCATOR_PATTERN = /^[a-zA-Z_][a-zA-Z0-9._]*:id\\/[\\S]+$/;\n\nconst BOOLEAN_ATTRS = [\n  'checkable', 'checked', 'clickable', 'enabled', 'focusable',\n  'focused', 'long-clickable', 'scrollable', 'selected',\n];\n\nconst NUMERIC_ATTRS = [\n  'index', 'instance',\n];\n\nconst STR_ATTRS = [\n  'description', RESOURCE_ID, 'text', 'class-name', 'package-name'\n];\n\nconst ALL_ATTRS = [\n  ...BOOLEAN_ATTRS,\n  ...NUMERIC_ATTRS,\n  ...STR_ATTRS,\n];\n\nconst ATTRIBUTE_ALIASES = [\n  [RESOURCE_ID, ['id']],\n  ['description', [\n    'content-description', 'content-desc',\n    'desc', 'accessibility-id',\n  ]],\n  ['index', ['nth-child']],\n];\n\n/**\n * Convert hyphen separated word to snake case\n *\n * @param {string?} str\n * @returns {string} The hyphen separated word translated to snake case\n */\nfunction toSnakeCase (str) {\n  if (!str) {\n    return '';\n  }\n  const tokens = str.split('-').map((str) => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase());\n  const out = tokens.join('');\n  return out.charAt(0).toLowerCase() + out.slice(1);\n}\n\n/**\n * Get the boolean from a CSS object. If empty, return true. If not true/false/empty, throw exception\n *\n * @param {import('css-selector-parser').AstAttribute|import('css-selector-parser').AstPseudoClass} css A\n * CSS object that has 'name' and 'value'\n * @returns {string} Either 'true' or 'false'. If value is empty, return 'true'\n */\nfunction requireBoolean (css) {\n  const val = _.toLower((css.value ?? css.argument)?.value) || 'true'; // an omitted boolean attribute means 'true' (e.g.: input[checked] means checked is true)\n  if (['true', 'false'].includes(val)) {\n    return val;\n  }\n  throw new Error(`'${css.name}' must be true, false or empty. Found '${css.value}'`);\n}\n\n/**\n * Get the canonical form of a CSS attribute name\n *\n * Converts to lowercase and if an attribute name is an alias for something else, return\n * what it is an alias for\n *\n * @param {import('css-selector-parser').AstAttribute|import('css-selector-parser').AstPseudoClass} cssEntity CSS object\n * @returns {string} The canonical attribute name\n */\nfunction requireEntityName (cssEntity) {\n  const attrName = cssEntity.name.toLowerCase();\n\n  // Check if it's supported and if it is, return it\n  if (ALL_ATTRS.includes(attrName)) {\n    return attrName.toLowerCase();\n  }\n\n  // If attrName is an alias for something else, return that\n  for (const [officialAttr, aliasAttrs] of ATTRIBUTE_ALIASES) {\n    if (aliasAttrs.includes(attrName)) {\n      return officialAttr;\n    }\n  }\n  throw new Error(`'${attrName}' is not a valid attribute. ` +\n    `Supported attributes are '${ALL_ATTRS.join(', ')}'`);\n}\n\n/**\n * Get a regex that matches a whole word. For the ~= CSS attribute selector.\n *\n * @param {string} word\n * @returns {string} A regex \"word\" matcher\n */\nfunction getWordMatcherRegex (word) {\n  return `\\\\b(\\\\w*${_.escapeRegExp(word)}\\\\w*)\\\\b`;\n}\n\n\nclass CssConverter {\n\n  constructor (selector, pkg) {\n    this.selector = selector;\n    this.pkg = pkg;\n  }\n\n  /**\n   * Add `<pkgName>:id/` prefix to beginning of string if it's not there already\n   *\n   * @param {string} locator The initial locator\n   * @returns {string} String with `<pkgName>:id/` prepended (if it wasn't already)\n   */\n  formatIdLocator (locator) {\n    return ID_LOCATOR_PATTERN.test(locator)\n      ? locator\n      : `${this.pkg || 'android'}:id/${locator}`;\n  }\n\n  /**\n   * Convert a CSS attribute into a UiSelector method call\n   *\n   * @param {import('css-selector-parser').AstAttribute} cssAttr CSS attribute object\n   * @returns {string} CSS attribute parsed as UiSelector\n   */\n  parseAttr (cssAttr) {\n    const attrValue = cssAttr.value?.value;\n    if (!_.isString(attrValue) && !_.isEmpty(attrValue)) {\n      throw new Error(`'${cssAttr.name}=${attrValue}' is an invalid attribute. ` +\n        `Only 'string' and empty attribute types are supported. Found '${attrValue}'`);\n    }\n    const attrName = requireEntityName(cssAttr);\n    const methodName = toSnakeCase(attrName);\n\n    // Validate that it's a supported attribute\n    if (!STR_ATTRS.includes(attrName) && !BOOLEAN_ATTRS.includes(attrName)) {\n      throw new Error(`'${attrName}' is not supported. Supported attributes are ` +\n        `'${[...STR_ATTRS, ...BOOLEAN_ATTRS].join(', ')}'`);\n    }\n\n    // Parse boolean, if it's a boolean attribute\n    if (BOOLEAN_ATTRS.includes(attrName)) {\n      return `.${methodName}(${requireBoolean(cssAttr)})`;\n    }\n\n    // Otherwise parse as string\n    let value = attrValue || '';\n    if (attrName === RESOURCE_ID) {\n      value = this.formatIdLocator(value);\n    }\n    if (value === '') {\n      return `.${methodName}Matches(\"\")`;\n    }\n\n    switch (cssAttr.operator) {\n      case '=':\n        return `.${methodName}(\"${value}\")`;\n      case '*=':\n        if (['description', 'text'].includes(attrName)) {\n          return `.${methodName}Contains(\"${value}\")`;\n        }\n        return `.${methodName}Matches(\"${_.escapeRegExp(value)}\")`;\n      case '^=':\n        if (['description', 'text'].includes(attrName)) {\n          return `.${methodName}StartsWith(\"${value}\")`;\n        }\n        return `.${methodName}Matches(\"^${_.escapeRegExp(value)}\")`;\n      case '$=':\n        return `.${methodName}Matches(\"${_.escapeRegExp(value)}$\")`;\n      case '~=':\n        return `.${methodName}Matches(\"${getWordMatcherRegex(value)}\")`;\n      default:\n        // Unreachable, but adding error in case a new CSS attribute is added.\n        throw new Error(`Unsupported CSS attribute operator '${cssAttr.operator}'. ` +\n          ` '=', '*=', '^=', '$=' and '~=' are supported.`);\n    }\n  }\n\n  /**\n   * Convert a CSS pseudo class to a UiSelector\n   *\n   * @param {import('css-selector-parser').AstPseudoClass} cssPseudo CSS Pseudo class\n   * @returns {string?} Pseudo selector parsed as UiSelector\n   */\n  parsePseudo (cssPseudo) {\n    const argValue = cssPseudo.argument?.value;\n    if (!_.isString(argValue) && !_.isEmpty(argValue)) {\n      throw new Error(`'${cssPseudo.name}=${argValue}'. ` +\n        `Unsupported css pseudo class value: '${argValue}'. Only 'string' type or empty is supported.`);\n    }\n\n    const pseudoName = requireEntityName(cssPseudo);\n\n    if (BOOLEAN_ATTRS.includes(pseudoName)) {\n      return `.${toSnakeCase(pseudoName)}(${requireBoolean(cssPseudo)})`;\n    }\n\n    if (NUMERIC_ATTRS.includes(pseudoName)) {\n      return `.${pseudoName}(${argValue})`;\n    }\n  }\n\n  /**\n   * Convert a CSS rule to a UiSelector\n   * @param {import('css-selector-parser').AstRule} cssRule CSS rule definition\n   */\n  parseCssRule (cssRule) {\n    if (cssRule.combinator && ![' ', '>'].includes(cssRule.combinator)) {\n      throw new Error(`'${cssRule.combinator}' is not a supported combinator. ` +\n        `Only child combinator (>) and descendant combinator are supported.`);\n    }\n\n    let uiAutomatorSelector = 'new UiSelector()';\n    const tagName = cssRule.tag?.name;\n    if (tagName && tagName !== '*') {\n      let androidClass = [tagName];\n      if (cssRule.classNames) {\n        for (const cssClassNames of cssRule.classNames) {\n          androidClass.push(cssClassNames);\n        }\n        uiAutomatorSelector += `.className(\"${androidClass.join('.')}\")`;\n      } else {\n        uiAutomatorSelector += `.classNameMatches(\"${tagName}\")`;\n      }\n    } else if (!_.isEmpty(cssRule.classNames)) {\n      uiAutomatorSelector += `.classNameMatches(\"${cssRule.classNames.join('\\\\.')}\")`;\n    }\n    if (!_.isEmpty(cssRule.ids)) {\n      uiAutomatorSelector += `.resourceId(\"${this.formatIdLocator(cssRule.ids[0])}\")`;\n    }\n    if (cssRule.attributes) {\n      for (const attr of cssRule.attributes) {\n        uiAutomatorSelector += this.parseAttr(attr);\n      }\n    }\n    if (cssRule.pseudoClasses) {\n      for (const pseudo of cssRule.pseudoClasses) {\n        const sel = this.parsePseudo(pseudo);\n        if (sel) {\n          uiAutomatorSelector += sel;\n        }\n      }\n    }\n    if (cssRule.nestedRule) {\n      uiAutomatorSelector += `.childSelector(${this.parseCssRule(cssRule.nestedRule)})`;\n    }\n    return uiAutomatorSelector;\n  }\n\n  /**\n   * Convert CSS object to UiAutomator2 selector\n   * @param {import('css-selector-parser').AstSelector} css CSS object\n   * @returns {string} The CSS object parsed as a UiSelector\n   */\n  parseCssObject (css) {\n    if (!_.isEmpty(css.rules)) {\n      return this.parseCssRule(css.rules[0]);\n    }\n\n    throw new Error('No rules could be parsed out of the current selector');\n  }\n\n  /**\n   * Convert a CSS selector to a UiAutomator2 selector\n   *\n   * @returns {string} The CSS selector converted to a UiSelector\n   */\n  toUiAutomatorSelector () {\n    let cssObj;\n    try {\n      cssObj = parseCssSelector(this.selector);\n    } catch (e) {\n      log.debug(e.stack);\n      throw new errors.InvalidSelectorError(`Invalid CSS selector '${this.selector}'. Reason: '${e.message}'`);\n    }\n    try {\n      return this.parseCssObject(cssObj);\n    } catch (e) {\n      log.debug(e.stack);\n      throw new errors.InvalidSelectorError(`Unsupported CSS selector '${this.selector}'. Reason: '${e.message}'`);\n    }\n  }\n}\n\nexport default CssConverter;\n"],"mappings":"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"}