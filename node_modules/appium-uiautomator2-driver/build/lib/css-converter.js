"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _cssSelectorParser = require("css-selector-parser");
var _lodash = _interopRequireDefault(require("lodash"));
var _driver = require("appium/driver");
var _logger = _interopRequireDefault(require("./logger"));
const parseCssSelector = (0, _cssSelectorParser.createParser)({
  syntax: {
    pseudoClasses: {
      unknown: 'accept',
      definitions: {
        Selector: ['has']
      }
    },
    combinators: ['>', '+', '~'],
    attributes: {
      operators: ['^=', '$=', '*=', '~=', '=']
    },
    ids: true,
    classNames: true,
    tag: {
      wildcard: true
    }
  },
  substitutes: true
});
const RESOURCE_ID = 'resource-id';
const ID_LOCATOR_PATTERN = /^[a-zA-Z_][a-zA-Z0-9._]*:id\/[\S]+$/;
const BOOLEAN_ATTRS = ['checkable', 'checked', 'clickable', 'enabled', 'focusable', 'focused', 'long-clickable', 'scrollable', 'selected'];
const NUMERIC_ATTRS = ['index', 'instance'];
const STR_ATTRS = ['description', RESOURCE_ID, 'text', 'class-name', 'package-name'];
const ALL_ATTRS = [...BOOLEAN_ATTRS, ...NUMERIC_ATTRS, ...STR_ATTRS];
const ATTRIBUTE_ALIASES = [[RESOURCE_ID, ['id']], ['description', ['content-description', 'content-desc', 'desc', 'accessibility-id']], ['index', ['nth-child']]];
function toSnakeCase(str) {
  if (!str) {
    return '';
  }
  const tokens = str.split('-').map(str => str.charAt(0).toUpperCase() + str.slice(1).toLowerCase());
  const out = tokens.join('');
  return out.charAt(0).toLowerCase() + out.slice(1);
}
function requireBoolean(css) {
  var _ref;
  const val = _lodash.default.toLower((_ref = css.value ?? css.argument) === null || _ref === void 0 ? void 0 : _ref.value) || 'true';
  if (['true', 'false'].includes(val)) {
    return val;
  }
  throw new Error(`'${css.name}' must be true, false or empty. Found '${css.value}'`);
}
function requireEntityName(cssEntity) {
  const attrName = cssEntity.name.toLowerCase();
  if (ALL_ATTRS.includes(attrName)) {
    return attrName.toLowerCase();
  }
  for (const [officialAttr, aliasAttrs] of ATTRIBUTE_ALIASES) {
    if (aliasAttrs.includes(attrName)) {
      return officialAttr;
    }
  }
  throw new Error(`'${attrName}' is not a valid attribute. ` + `Supported attributes are '${ALL_ATTRS.join(', ')}'`);
}
function getWordMatcherRegex(word) {
  return `\\b(\\w*${_lodash.default.escapeRegExp(word)}\\w*)\\b`;
}
class CssConverter {
  constructor(selector, pkg) {
    this.selector = selector;
    this.pkg = pkg;
  }
  formatIdLocator(locator) {
    return ID_LOCATOR_PATTERN.test(locator) ? locator : `${this.pkg || 'android'}:id/${locator}`;
  }
  parseAttr(cssAttr) {
    var _cssAttr$value;
    const attrValue = (_cssAttr$value = cssAttr.value) === null || _cssAttr$value === void 0 ? void 0 : _cssAttr$value.value;
    if (!_lodash.default.isString(attrValue) && !_lodash.default.isEmpty(attrValue)) {
      throw new Error(`'${cssAttr.name}=${attrValue}' is an invalid attribute. ` + `Only 'string' and empty attribute types are supported. Found '${attrValue}'`);
    }
    const attrName = requireEntityName(cssAttr);
    const methodName = toSnakeCase(attrName);
    if (!STR_ATTRS.includes(attrName) && !BOOLEAN_ATTRS.includes(attrName)) {
      throw new Error(`'${attrName}' is not supported. Supported attributes are ` + `'${[...STR_ATTRS, ...BOOLEAN_ATTRS].join(', ')}'`);
    }
    if (BOOLEAN_ATTRS.includes(attrName)) {
      return `.${methodName}(${requireBoolean(cssAttr)})`;
    }
    let value = attrValue || '';
    if (attrName === RESOURCE_ID) {
      value = this.formatIdLocator(value);
    }
    if (value === '') {
      return `.${methodName}Matches("")`;
    }
    switch (cssAttr.operator) {
      case '=':
        return `.${methodName}("${value}")`;
      case '*=':
        if (['description', 'text'].includes(attrName)) {
          return `.${methodName}Contains("${value}")`;
        }
        return `.${methodName}Matches("${_lodash.default.escapeRegExp(value)}")`;
      case '^=':
        if (['description', 'text'].includes(attrName)) {
          return `.${methodName}StartsWith("${value}")`;
        }
        return `.${methodName}Matches("^${_lodash.default.escapeRegExp(value)}")`;
      case '$=':
        return `.${methodName}Matches("${_lodash.default.escapeRegExp(value)}$")`;
      case '~=':
        return `.${methodName}Matches("${getWordMatcherRegex(value)}")`;
      default:
        throw new Error(`Unsupported CSS attribute operator '${cssAttr.operator}'. ` + ` '=', '*=', '^=', '$=' and '~=' are supported.`);
    }
  }
  parsePseudo(cssPseudo) {
    var _cssPseudo$argument;
    const argValue = (_cssPseudo$argument = cssPseudo.argument) === null || _cssPseudo$argument === void 0 ? void 0 : _cssPseudo$argument.value;
    if (!_lodash.default.isString(argValue) && !_lodash.default.isEmpty(argValue)) {
      throw new Error(`'${cssPseudo.name}=${argValue}'. ` + `Unsupported css pseudo class value: '${argValue}'. Only 'string' type or empty is supported.`);
    }
    const pseudoName = requireEntityName(cssPseudo);
    if (BOOLEAN_ATTRS.includes(pseudoName)) {
      return `.${toSnakeCase(pseudoName)}(${requireBoolean(cssPseudo)})`;
    }
    if (NUMERIC_ATTRS.includes(pseudoName)) {
      return `.${pseudoName}(${argValue})`;
    }
  }
  parseCssRule(cssRule) {
    var _cssRule$tag;
    if (cssRule.combinator && ![' ', '>'].includes(cssRule.combinator)) {
      throw new Error(`'${cssRule.combinator}' is not a supported combinator. ` + `Only child combinator (>) and descendant combinator are supported.`);
    }
    let uiAutomatorSelector = 'new UiSelector()';
    const tagName = (_cssRule$tag = cssRule.tag) === null || _cssRule$tag === void 0 ? void 0 : _cssRule$tag.name;
    if (tagName && tagName !== '*') {
      let androidClass = [tagName];
      if (cssRule.classNames) {
        for (const cssClassNames of cssRule.classNames) {
          androidClass.push(cssClassNames);
        }
        uiAutomatorSelector += `.className("${androidClass.join('.')}")`;
      } else {
        uiAutomatorSelector += `.classNameMatches("${tagName}")`;
      }
    } else if (!_lodash.default.isEmpty(cssRule.classNames)) {
      uiAutomatorSelector += `.classNameMatches("${cssRule.classNames.join('\\.')}")`;
    }
    if (!_lodash.default.isEmpty(cssRule.ids)) {
      uiAutomatorSelector += `.resourceId("${this.formatIdLocator(cssRule.ids[0])}")`;
    }
    if (cssRule.attributes) {
      for (const attr of cssRule.attributes) {
        uiAutomatorSelector += this.parseAttr(attr);
      }
    }
    if (cssRule.pseudoClasses) {
      for (const pseudo of cssRule.pseudoClasses) {
        const sel = this.parsePseudo(pseudo);
        if (sel) {
          uiAutomatorSelector += sel;
        }
      }
    }
    if (cssRule.nestedRule) {
      uiAutomatorSelector += `.childSelector(${this.parseCssRule(cssRule.nestedRule)})`;
    }
    return uiAutomatorSelector;
  }
  parseCssObject(css) {
    if (!_lodash.default.isEmpty(css.rules)) {
      return this.parseCssRule(css.rules[0]);
    }
    throw new Error('No rules could be parsed out of the current selector');
  }
  toUiAutomatorSelector() {
    let cssObj;
    try {
      cssObj = parseCssSelector(this.selector);
    } catch (e) {
      _logger.default.debug(e.stack);
      throw new _driver.errors.InvalidSelectorError(`Invalid CSS selector '${this.selector}'. Reason: '${e.message}'`);
    }
    try {
      return this.parseCssObject(cssObj);
    } catch (e) {
      _logger.default.debug(e.stack);
      throw new _driver.errors.InvalidSelectorError(`Unsupported CSS selector '${this.selector}'. Reason: '${e.message}'`);
    }
  }
}
var _default = CssConverter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,